[{"path":"https://florianm.github.io/synthpop/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Beata Nowok. Maintainer.","code":""},{"path":"https://florianm.github.io/synthpop/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beata Nowok, Gillian M. Raab, Chris Dibben (2016). synthpop: Bespoke Creation Synthetic Data R. Journal Statistical Software, 74(11), 1-26. doi:10.18637/jss.v074.i11","code":"@Article{,   title = {{synthpop}: Bespoke Creation of Synthetic Data in {R}},   author = {Beata Nowok and Gillian M. Raab and Chris Dibben},   journal = {Journal of Statistical Software},   year = {2016},   volume = {74},   number = {11},   pages = {1--26},   doi = {10.18637/jss.v074.i11}, }"},{"path":"https://florianm.github.io/synthpop/index.html","id":"synthpop","dir":"","previous_headings":"","what":"synthpop","title":"synthpop","text":"goal synthpop generate synthetic versions sensitive microdata statistical disclosure control.","code":""},{"path":"https://florianm.github.io/synthpop/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"synthpop","text":"can install development version synthpop GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"bnowok/synthpop\")"},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":null,"dir":"Reference","previous_headings":"","what":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"Sample 5,000 individuals Social Diagnosis 2011 survey;   selected variables .","code":""},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"","code":"SD2011"},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"data frame 5,000 observations following 35 variables: sex Sex age Age person, 2011 agegr Age group, 2011 placesize Category place residence region Region (voivodeship) edu Highest educational qualification, 2011 eduspec Discipline completed qualification socprof Socio-economic status, 2011 unempdur Total duration unemployment last 2 years (months) income Personal monthly net income marital Marital status mmarr Month marriage ymarr Year marriage msepdiv Month separation/divorce ysepdiv Year separation/divorce ls Perception life whole depress Depression symptoms indicator trust View interpersonal trust trustfam Trust family members trustneigh Trust neighbours sport Active engagement form sport exercise nofriend Number friends smoke Smoking cigarettes nociga Number cigarettes smoked per day alcabuse Drinking much alcohol alcsol Starting use alcohol cope troubles workab Working abroad 2007-2011 wkabdur Total time spent working abroad wkabint Plans go abroad work next two years wkabintdur Intended duration working abroad emcc Intended destination country englang Knowledge English language height Height person weight Weight person bmi Body mass index","code":""},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"Please note original variable names changed make    self-explanatory. variable labels adjusted well.","code":""},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"Council Social Monitoring. Social Diagnosis 2000-2011: integrated database.   http://www.diagnoza.com/index-en.html [downloaded 13/12/2013]","code":""},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"Czapinski J. Panek T. (Eds.) (2011). Social Diagnosis 2011. Objective    Subjective Quality Life Poland - full report. Contemporary Economics,    Volume 5, Issue 3 (special issue) http://ce.vizja.pl/en/issues/volume/5/issue/3#art254","code":""},{"path":"https://florianm.github.io/synthpop/reference/SD2011.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Social Diagnosis 2011 - Objective and Subjective Quality of Life in Poland — SD2011","text":"","code":"spineplot(englang ~ agegr, data = SD2011, xlab = \"Age group\", ylab = \"Knowledge of English\")    boxplot(income ~ sex, data = SD2011[SD2011$income != -8,])"},{"path":"https://florianm.github.io/synthpop/reference/codebook.syn.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a codebook from a data frame — codebook.syn","title":"Makes a codebook from a data frame — codebook.syn","text":"Describes features variables data frame relevant synthesis.","code":""},{"path":"https://florianm.github.io/synthpop/reference/codebook.syn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a codebook from a data frame — codebook.syn","text":"","code":"codebook.syn(data, maxlevs = 3)"},{"path":"https://florianm.github.io/synthpop/reference/codebook.syn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes a codebook from a data frame — codebook.syn","text":"data data frame data set synthesised. maxlevs number factor levels separate tables      labels returned part labs component.","code":""},{"path":"https://florianm.github.io/synthpop/reference/codebook.syn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes a codebook from a data frame — codebook.syn","text":"list two components.  tab - data frame following information variable: name variable name class class variable nmiss number missing values (NA) perctmiss percentage missing values ndistinct number distinct values (excluding missing values) details range numeric variables, maximum length character      variables, labels factors <= maxlevs levels labs - list extra tables labels factor number     levels greater maxlevs.","code":""},{"path":"https://florianm.github.io/synthpop/reference/codebook.syn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes a codebook from a data frame — codebook.syn","text":"","code":"codebook.syn(SD2011) #> $tab #>      variable     class nmiss perctmiss ndistinct #> 1         sex    factor     0      0.00         2 #> 2         age   numeric     0      0.00        79 #> 3       agegr    factor     4      0.08         6 #> 4   placesize    factor     0      0.00         6 #> 5      region    factor     0      0.00        16 #> 6         edu    factor     7      0.14         4 #> 7     eduspec    factor    20      0.40        27 #> 8     socprof    factor    33      0.66         9 #> 9    unempdur   numeric     0      0.00        30 #> 10     income   numeric   683     13.66       406 #> 11    marital    factor     9      0.18         6 #> 12      mmarr   numeric  1350     27.00        12 #> 13      ymarr   numeric  1320     26.40        74 #> 14    msepdiv   numeric  4300     86.00        12 #> 15    ysepdiv   numeric  4275     85.50        50 #> 16         ls    factor     8      0.16         7 #> 17    depress   numeric    89      1.78        22 #> 18      trust    factor    37      0.74         3 #> 19   trustfam    factor    11      0.22         3 #> 20 trustneigh    factor    11      0.22         3 #> 21      sport    factor    41      0.82         2 #> 22   nofriend   numeric     0      0.00        44 #> 23      smoke    factor    10      0.20         2 #> 24     nociga   numeric     0      0.00        30 #> 25   alcabuse    factor     7      0.14         2 #> 26     alcsol    factor    82      1.64         2 #> 27     workab    factor   438      8.76         2 #> 28    wkabdur character     0      0.00        33 #> 29    wkabint    factor    36      0.72         3 #> 30 wkabintdur    factor  4697     93.94         5 #> 31       emcc    factor  4714     94.28        17 #> 32    englang    factor    15      0.30         3 #> 33     height   numeric    35      0.70        64 #> 34     weight   numeric    53      1.06        90 #> 35        bmi   numeric    59      1.18      1387 #>                                                                             details #> 1                                                                   'MALE' 'FEMALE' #> 2                                                                    Range: 16 - 97 #> 3                                                                 See table in labs #> 4                                                                 See table in labs #> 5                                                                 See table in labs #> 6                                                                 See table in labs #> 7                                                                 See table in labs #> 8                                                                 See table in labs #> 9                                                                    Range: -8 - 48 #> 10                                                                Range: -8 - 16000 #> 11                                                                See table in labs #> 12                                                                    Range: 1 - 12 #> 13                                                               Range: 1937 - 2011 #> 14                                                                    Range: 1 - 12 #> 15                                                               Range: 1944 - 2011 #> 16                                                                See table in labs #> 17                                                                    Range: 0 - 21 #> 18 'MOST PEOPLE CAN BE TRUSTED' 'ONE CAN`T BE TOO CAREFUL' 'IT`S DIFFICULT TO TELL' #> 19                                                          'YES' 'NO' 'NO OPINION' #> 20                                                          'YES' 'NO' 'NO OPINION' #> 21                                                                       'YES' 'NO' #> 22                                                                   Range: -8 - 99 #> 23                                                                       'YES' 'NO' #> 24                                                                   Range: -8 - 60 #> 25                                                                       'YES' 'NO' #> 26                                                                       'YES' 'NO' #> 27                                                                       'YES' 'NO' #> 28                                                                    Max length: 2 #> 29                               'YES, TO EU COUNTRY' 'YES, TO NON-EU COUNTRY' 'NO' #> 30                                                                See table in labs #> 31                                                                See table in labs #> 32                                                        'ACTIVE' 'PASSIVE' 'NONE' #> 33                                                                 Range: 116 - 202 #> 34                                                                  Range: 37 - 150 #> 35                                        Range: 12.962962962963 - 449.979730642764 #>  #> $labs #> $labs$agegr #>   label #> 1 16-24 #> 2 25-34 #> 3 35-44 #> 4 45-59 #> 5 60-64 #> 6   65+ #>  #> $labs$placesize #>                    label #> 1 URBAN 500,000 AND OVER #> 2  URBAN 200,000-500,000 #> 3  URBAN 100,000-200,000 #> 4   URBAN 20,000-100,000 #> 5     URBAN BELOW 20,000 #> 6            RURAL AREAS #>  #> $labs$region #>                  label #> 1         Dolnoslaskie #> 2   Kujawsko-pomorskie #> 3              Lodzkie #> 4            Lubelskie #> 5             Lubuskie #> 6          Malopolskie #> 7          Mazowieckie #> 8             Opolskie #> 9         Podkarpackie #> 10           Podlaskie #> 11           Pomorskie #> 12             Slaskie #> 13      Swietokrzyskie #> 14 Warminsko-mazurskie #> 15       Wielkopolskie #> 16 Zachodnio-pomorskie #>  #> $labs$edu #>                      label #> 1     PRIMARY/NO EDUCATION #> 2       VOCATIONAL/GRAMMAR #> 3                SECONDARY #> 4 POST-SECONDARY OR HIGHER #>  #> $labs$eduspec #>                                                 label #> 1                      agriculture, forestry, fishing #> 2                       architecture and construction #> 3                 armed forces and country protection #> 4                                                 art #> 5                                 biological sciences #> 6                                    computer science #> 7                          economy and administration #> 8                            environmental protection #> 9                                          healthcare #> 10                         journalism and information #> 11                                                law #> 12                                       liberal arts #> 13                         mathematics and statistics #> 14                                         pedagogics #> 15                                  physical sciences #> 16                          production and processing #> 17                              protection and safety #> 18                                      public health #> 19 services for the population and transport services #> 20                                    social sciences #> 21                                     social welfare #> 22                                  technical science #> 23                                veterinary medicine #> 24                                              other #> 25                                  no specialisation #> 26                                     not applicable #> 27                                       lack of data #>  #> $labs$socprof #>                         label #> 1  EMPLOYED IN PRIVATE SECTOR #> 2   EMPLOYED IN PUBLIC SECTOR #> 3               SELF-EMPLOYED #> 4                      FARMER #> 5     LONG-TERM SICK/DISABLED #> 6                     RETIRED #> 7            PUPIL OR STUDENT #> 8                  UNEMPLOYED #> 9 OTHER ECONOMICALLY INACTIVE #>  #> $labs$marital #>                label #> 1             SINGLE #> 2            MARRIED #> 3            WIDOWED #> 4           DIVORCED #> 5  LEGALLY SEPARATED #> 6 DE FACTO SEPARATED #>  #> $labs$ls #>                 label #> 1           DELIGHTED #> 2             PLEASED #> 3    MOSTLY SATISFIED #> 4               MIXED #> 5 MOSTLY DISSATISFIED #> 6             UNHAPPY #> 7            TERRIBLE #>  #> $labs$wkabintdur #>                    label #> 1       LESS THAN 1 YEAR #> 2 LESS THAN 1 TO 2 YEARS #> 3      MORE THAN 2 YEARS #> 4                FOREVER #> 5             IT DEPENDS #>  #> $labs$emcc #>                 label #> 1             AUSTRIA #> 2             BELGIUM #> 3             DENMARK #> 4              FRANCE #> 5             GERMANY #> 6       GREAT BRITAIN #> 7             IRELAND #> 8               ITALY #> 9         NETHERLANDS #> 10              SPAIN #> 11             SWEDEN #> 12 OTHER EU COUNTRIES #> 13          AUSTRALIA #> 14             CANADA #> 15                USA #> 16             NORWAY #> 17    OTHER COUNTRIES #>  #>"},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare model estimates based on synthesised and observed data — compare.fit.synds","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"model used synthesised data set fitted   observed data set. coefficients confidence intervals   observed data plotted together estimates synthetic data.   one synthetic data set generated (object$m>1)   combining rules applied. Analysis-specific utility measures used  evaluate differences synthetic observed data.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"","code":"# S3 method for fit.synds compare(object, data, plot = \"Z\",    print.coef = FALSE, return.plot = TRUE, plot.intercept = FALSE,    lwd = 1, lty = 1, lcol = c(\"#1A3C5A\",\"#4187BF\"),    dodge.height = .5, point.size = 2.5,   population.inference = FALSE, ci.level = 0.95, ...)  # S3 method for compare.fit.synds print(x, print.coef = x$print.coef, ...)"},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"object object type fit.synds created fitting model     synthesised data set using function glm.synds    lm.synds. data original observed data set. plot values plotted: \"Z\" (Z scores) \"coef\"    (coefficients). print.coef logical value determining whether tables     estimates original synthetic data printed. return.plot logical value indicating whether confidence interval    plot returned. plot.intercept logical value indicating whether estimates     intercept plotted. lwd line type. lty line width. lcol line colours. dodge.height size vertical shifts confidence intervals     prevent overlaping. point.size size plotting symbols used plot point estimates     coefficients. population.inference logical value indicating whether intervals     inference population quantities, decribed Karr et al. (2006),     calculated plotted. option suppresses lack--fit test     standardised differences since based differences     standardised original interval widths. ci.level Confidence interval coverage proportion. ... additional parameters passed ggplot. x object class compare.fit.synds.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"function can used evaluate whether method used  synthesis appropriate fitted model. case  estimates  synthetic dataof expected original  data xpct(Beta) xpct(Z) differ estimates  observed data (Beta Z) expected  standard errors (se(Beta) se(Z)). details see  vignette inference.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"object class compare.fit.synds list   following components: call original call fit model synthesised data set. coef.obs data frame including estimates based observed    data: coefficients (Beta), standard errors (se(Beta))    Z scores (Z). coef.syn data frame including (combined) estimates based     synthesised data: point estimates observed data coefficients     (B.syn), standard errors estimates (se(B.syn)),     estimates observed standard errors (se(Beta).syn), Z scores     estimates (Z.syn) standard errors (se(Z.syn)).     Note se(B.syn) se(Z.syn) give standard errors     mean m syntheses can made small     increasing m (see vignette inference details). coef.diff data frame containing standardized differences     coefficients estimated original data calculated     combined synthetic data. difference standardized dividing     estimated standard error fit original. corresponding     p-values calculated standard Normal distribution represent     probability achieving differences large found model use     synthesis compatible model generated original data. mean.abs.std.diff Mean absolute standardized difference (    coefficients). ci.overlap data frame containing percentage overlap     estimated synthetic confidence intervals original sample     confidence intervals parameter. population.inference = TRUE     overlaps calculated suggested Karr et al. (2006). Otherwise     simpler overlap measure intervals equal length calculated. mean.ci.overlap Mean confidence interval overlap (    coefficients). lack..fit lack--fit measure m synthetic data     sets combined, calculated follows, object$incomplete = FALSE.     vector mean differences (diff) coefficients     calculated synthetic original data provides     standardised lack--fit = t(diff) %*% V^(-1) t(diff),     %*% represents matrix product V^(-1)     inverse variance-covariance matrix mean coefficients     original data. model used synthesize data     correct quantity, Mahalanobis distance measure,     follow chi-squared distribution degrees freedom, thus     expectation, equal number parameters (p) fitted     model. object$incomplete = TRUE variance-covariance matrix    coefficients estimated differences m     estimates lack--fit statistic follows  Hotelling's T*2     distribution lack--fit statistic referred F(p, m - p). lof.pvalue p-value combined lack--fit test NULL     hypothesis method used synthesis retains relationships     variables influence parameters fit. ci.plot ggplot coefficients confidence     intervals models based observed synthetic data.     return.plot set FALSE ci.plot     NULL. print.coef logical value determining whether tables     estimates original synthetic data printed. m number synthetic versions original (observed) data. ncoef number coefficients fitted model (including     intercept). incomplete whether methods incomplete synthesis due Reiter     (2003) used calculations. population.inference whether intervals decribed Karr et al.     (2016) calculated.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"Karr, ., Kohnen, C.N., Oganian, ., Reiter, J.P. Sanil, .P. (2006).    framework evaluating utility data altered protect    confidentiality. American Statistician, 60(3), 224-232. Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 . Reiter, J.P. (2003) Inference partially synthetic, public use microdata    sets. Survey Methodology, 29, 181-188.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/compare.fit.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare model estimates based on synthesised and observed data — compare.fit.synds","text":"","code":"ods <- SD2011[,c(\"sex\",\"age\",\"edu\",\"smoke\")] s1 <- syn(ods, m = 3) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu smoke #>  #> Synthesis number 3 #> -------------------- #>  sex age edu smoke f1 <- glm.synds(smoke ~ sex + age + edu, data = s1, family = \"binomial\") compare(f1, ods)  #> Error in eval(mf, parent.frame()): object 'ods' not found compare(f1, ods, print.coef = TRUE, plot = \"coef\") #> Error in eval(mf, parent.frame()): object 'ods' not found"},{"path":"https://florianm.github.io/synthpop/reference/compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison of synthesised and observed data — compare","title":"Comparison of synthesised and observed data — compare","text":"generic function comparison synthesised observed data.   function invokes particular methods depend class   first argument.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison of synthesised and observed data — compare","text":"","code":"compare(object, data, ...)"},{"path":"https://florianm.github.io/synthpop/reference/compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison of synthesised and observed data — compare","text":"object synthetic data object class synds      fit.synds. data original observed data set. ... additional arguments specific method.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison of synthesised and observed data — compare","text":"Compare methods facilitate quality assessment synthetic data comapring   original observed data sets. data (class   synds) models fitted (class fit.synds)   compared.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comparison of synthesised and observed data — compare","text":"value returned compare depends class argument.   See documentation particular methods details.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare univariate distributions of synthesised and observed data — compare.synds","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"Compare synthesised data set original (observed) data set  using percent frequency tables histograms. one  synthetic data set generated (object$m > 1),   default pooled synthetic data used comparison. function can also used synthetic data created  syn(), additional parameter cont.na might  need provided.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"","code":"# S3 method for synds compare(object, data, vars = NULL,         msel = NULL, stat = \"percents\", breaks = 20,         nrow = 2, ncol = 2, rel.size.x = 1,         utility.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),         utility.for.plot = \"S_pMSE\",         cols = c(\"#1A3C5A\",\"#4187BF\"),         plot = TRUE, table = FALSE, ...)  # S3 method for data.frame compare(object, data, vars = NULL, cont.na = NULL,         msel = NULL, stat = \"percents\", breaks = 20,         nrow = 2, ncol = 2, rel.size.x = 1,         utility.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),         utility.for.plot = \"S_pMSE\",         cols = c(\"#1A3C5A\",\"#4187BF\"),         plot = TRUE, table = FALSE, ...)  # S3 method for list compare(object, data, vars = NULL, cont.na = NULL,         msel = NULL, stat = \"percents\", breaks = 20,         nrow = 2, ncol = 2, rel.size.x = 1,         utility.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),         utility.for.plot = \"S_pMSE\",         cols = c(\"#1A3C5A\",\"#4187BF\"),         plot = TRUE, table = FALSE, ...)  # S3 method for compare.synds print(x, ...)"},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"object object class synds, stands 'synthesised     data set'. typically created function syn() includes     object$m synthesised data set(s) object$syn. Alternatively,     data synthesised using syn(), can data frame     synthetic data set list data frames synthetic data sets,     created original data variables     method. data original (observed) data set. vars variables compared. vars NULL     (default) synthesised variables compared. cont.na named list codes missing values continuous     variables different R missing data code NA.     names list elements must correspond variables names     missing data codes need specified. msel index indices synthetic data copies comparison     made. NULL pooled synthetic data copies compared     original data. stat determines whether tables plots present percentages     stat = \"percents\", default, counts stat = \"counts\".     m > 1 msel = NULL average counts synthetic data     derived. breaks number cells histogram. nrow number rows plotting area. ncol number columns plotting area. rel.size.x number representing relative size x-axis labels. utility.stats single string vector strings determines     utility measures print. Must selection :       \"VW\", \"FT\",\"JSD\", \"SPECKS\", \"WMabsDD\",      \"U\", \"G\", \"pMSE\", \"PO50\", \"MabsDD\",      \"dBhatt\",  \"S_VW\", \"S_FT\", \"S_JSD\",      \"S_WMabsDD\", \"S_G\", \"S_pMSE\", \"df\".      utility.stats = \"\", printed.      information see details section utility.tab. utility..plot single string determines utility      measure print facet labels plot. Set NULL     print variable names . cols bar colors. plot logical value default set TRUE indicating     whether plots produced. table logical value default set FALSE indicating     whether tables printed. ... additional parameters. x object class compare.synds.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"Missing data categories numeric variables plotted plot non-missing values. indicated miss. suffix. Numeric variables fewer 6 distinct values changed factors order make plots readable.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"object class compare.synds list including list comparative frequency tables (tables) ggplot object (plots) bar charts/histograms. multiple plots produced corresponding frequency tables stored list.","code":""},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 .","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/compare.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare univariate distributions of synthesised and observed data — compare.synds","text":"","code":"ods <- SD2011[ , c(\"sex\", \"age\", \"edu\", \"marital\", \"ls\", \"income\")] s1  <- syn(ods, cont.na = list(income = -8)) #>  #> Synthesis #> ----------- #>  sex age edu marital ls income  ### synthetic data provided as a 'synds' object compare(s1, ods, vars = \"ls\") #>  #> Comparing percentages observed with synthetic #>   #>  #> Selected utility measures: #>     pMSE   S_pMSE df #> ls 3e-05 0.343229  7 compare(s1, ods, vars = \"income\", stat = \"counts\",         table = TRUE, breaks = 10) #>  #> Comparing counts observed with synthetic #>  #> $income #>              0 2000 4000 6000 8000 10000 12000 14000 miss.-8 miss.NA #> observed  2978  605   92   23    9     3     0     4     603     683 #> synthetic 2956  570   93   21   10     2     0     5     618     725 #>   #>  #> Selected utility measures: #>            pMSE   S_pMSE df #> income 0.000122 1.621385  6  ### synthetic data provided as 'data.frame' compare(s1$syn, ods, vars = \"ls\") #>  #> Comparing percentages observed with synthetic #>   #>  #> Selected utility measures: #>     pMSE   S_pMSE df #> ls 3e-05 0.343229  7 compare(s1$syn, ods, vars = \"income\", cont.na = list(income = -8),         stat = \"counts\", table = TRUE, breaks = 10) #>  #> Comparing counts observed with synthetic #>  #> $income #>              0 2000 4000 6000 8000 10000 12000 14000 miss.-8 miss.NA #> observed  2978  605   92   23    9     3     0     4     603     683 #> synthetic 2956  570   93   21   10     2     0     5     618     725 #>   #>  #> Selected utility measures: #>            pMSE   S_pMSE df #> income 0.000122 1.621385  6"},{"path":"https://florianm.github.io/synthpop/reference/glm.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting (generalized) linear models to synthetic data — glm.synds, lm.synds","title":"Fitting (generalized) linear models to synthetic data — glm.synds, lm.synds","text":"Fits generalized linear models simple linear models synthesised    data set(s) using glm lm    function respectively.","code":""},{"path":"https://florianm.github.io/synthpop/reference/glm.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting (generalized) linear models to synthetic data — glm.synds, lm.synds","text":"","code":"glm.synds(formula, family = \"binomial\", data,  ...) lm.synds(formula, data, ...)  # S3 method for fit.synds print(x, msel = NULL, ...)"},{"path":"https://florianm.github.io/synthpop/reference/glm.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting (generalized) linear models to synthetic data — glm.synds, lm.synds","text":"formula symbolic description model estimated.      typical model form response ~ predictors. See     documentation glm     formula details. family description error distribution      link function used model. See documentation      glm family details. data object class synds, stands     'synthesised data set'. typically created     function syn includes data$m      synthesised data set(s). ... additional parameters passed glm      lm. x object class fit.synds. msel index indices synthetic data copies coefficient     estimates displayed. NULL (default) combined      (average) coefficient estimates printed.","code":""},{"path":"https://florianm.github.io/synthpop/reference/glm.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting (generalized) linear models to synthetic data — glm.synds, lm.synds","text":"summary function (summary.fit.synds) can    used obtain combined results models fitted m synthetic data sets. object class fit.synds. list following    components: call original call glm.synds lm.synds. mcoefavg combined (average) coefficient estimates. mvaravg combined (average) variance estimates mcoef. analyses summary.glm summary.lm object respectively     list m objects. fitting.function function used fit model. n number cases original data. k number cases synthesised data. proper logical value indicating whether synthetic data      generated using proper synthesis. m number synthetic versions observed data. method vector synthesising methods applied variable     saved synthesised data. incomplete logical value indicating whether dependent variable      model synthesised. mcoef matrix coefficients estimates m syntheses. mvar matrix variance estimates m syntheses.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/glm.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting (generalized) linear models to synthetic data — glm.synds, lm.synds","text":"","code":"### Logit model  ods <- SD2011[1:1000, c(\"sex\", \"age\", \"edu\", \"marital\", \"ls\", \"smoke\")] s1 <- syn(ods, m = 3) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu marital ls smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu marital ls smoke #>  #> Synthesis number 3 #> -------------------- #>  sex age edu marital ls smoke f1 <- glm.synds(smoke ~ sex + age + edu + marital + ls, data = s1, family = \"binomial\") f1 #> Note: To get more details of the fit see vignette on inference. #>  #> Call: #> glm.synds(formula = smoke ~ sex + age + edu + marital + ls, family = \"binomial\",  #>     data = s1) #>  #> Average coefficient estimates from 3 syntheses: #>                 (Intercept)                   sexFEMALE  #>                  0.78132409                  0.40047824  #>                         age       eduVOCATIONAL/GRAMMAR  #>                  0.03162859                 -0.49917057  #>                eduSECONDARY eduPOST-SECONDARY OR HIGHER  #>                  0.20636027                  0.40210073  #>              maritalMARRIED              maritalWIDOWED  #>                 -1.07129180                 -1.34921715  #>             maritalDIVORCED    maritalLEGALLY SEPARATED  #>                 -1.77062759                  5.02832864  #>   maritalDE FACTO SEPARATED                   lsPLEASED  #>                 -1.60472568                 -0.19522353  #>          lsMOSTLY SATISFIED                     lsMIXED  #>                 -0.27313860                 -0.59240185  #>       lsMOSTLY DISSATISFIED                   lsUNHAPPY  #>                 -0.80365281                  4.16171777  #>                  lsTERRIBLE  #>                 -1.69769654  print(f1, msel = 1:2) #> Note: To get more details of the fit see vignette on inference. #>  #> Call: #> glm.synds(formula = smoke ~ sex + age + edu + marital + ls, family = \"binomial\",  #>     data = s1) #>  #> Coefficient estimates for selected synthetic data set(s): #>       (Intercept) sexFEMALE        age eduVOCATIONAL/GRAMMAR eduSECONDARY #> syn=1   0.3317130 0.3249412 0.03627232            -0.4680513   0.39284253 #> syn=2   0.5287819 0.4765357 0.02875332            -0.4020173   0.09857498 #>       eduPOST-SECONDARY OR HIGHER maritalMARRIED maritalWIDOWED maritalDIVORCED #> syn=1                   0.5054562      -1.228471      -1.701460       -2.429159 #> syn=2                   0.3095684      -0.901640      -1.023873       -1.302325 #>       maritalLEGALLY SEPARATED maritalDE FACTO SEPARATED   lsPLEASED #> syn=1                -2.511133                 13.795524  0.24841668 #> syn=2                12.567790                 -1.768138 -0.03845906 #>       lsMOSTLY SATISFIED    lsMIXED lsMOSTLY DISSATISFIED lsUNHAPPY lsTERRIBLE #> syn=1       -0.004795404 -0.2054062            -0.5593761 14.244229  -1.404480 #> syn=2       -0.024473956 -0.5894033            -0.5175106 -1.088785  -1.943883    ### Linear model ods <- SD2011[1:1000,c(\"sex\", \"age\", \"income\", \"marital\", \"depress\")] ods$income[ods$income == -8] <- NA s2 <- syn(ods, m = 3) #>  #> Synthesis number 1 #> -------------------- #>  sex age income marital depress #>  #> Synthesis number 2 #> -------------------- #>  sex age income marital depress #>  #> Synthesis number 3 #> -------------------- #>  sex age income marital depress f2 <- lm.synds(depress ~ sex + age + log(income) + marital, data = s2) f2 #> Note: To get more details of the fit see vignette on inference. #>  #> Call: #> lm.synds(formula = depress ~ sex + age + log(income) + marital,  #>     data = s2) #>  #> Average coefficient estimates from 3 syntheses: #>               (Intercept)                 sexFEMALE                       age  #>                4.55666072                0.64838674                0.13883037  #>               log(income)            maritalMARRIED            maritalWIDOWED  #>               -0.95783198               -0.43762656                0.23145510  #>           maritalDIVORCED maritalDE FACTO SEPARATED  maritalLEGALLY SEPARATED  #>               -0.08798294                0.55123224                5.72857725  print(f2,1:3) #> Note: To get more details of the fit see vignette on inference. #>  #> Call: #> lm.synds(formula = depress ~ sex + age + log(income) + marital,  #>     data = s2) #>  #> Coefficient estimates for selected synthetic data set(s): #>       (Intercept) sexFEMALE       age log(income) maritalMARRIED maritalWIDOWED #> syn=1    4.573863 0.6466173 0.1567472  -1.0525466   -0.601444667    -0.08333105 #> syn=2    4.990092 0.6603177 0.1214229  -0.9662671   -0.007801509     1.75863441 #> syn=3    4.106028 0.6382253 0.1383211  -0.8546822   -0.703633512    -0.98093804 #>       maritalDIVORCED maritalDE FACTO SEPARATED maritalLEGALLY SEPARATED #> syn=1       0.5170044                 -1.624072                       NA #> syn=2      -0.4643895                  1.301942                 5.728577 #> syn=3      -0.3165637                  1.975827                       NA"},{"path":"https://florianm.github.io/synthpop/reference/multi.compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate comparison of synthesised and observed data — multi.compare","title":"Multivariate comparison of synthesised and observed data — multi.compare","text":"Graphical comparisons variable (var) synthesised data set    original (observed) data set within subgroups defined    variables vector . var can factor continuous    variable plots produced depend class var.    variables usually factors variables    values.","code":""},{"path":"https://florianm.github.io/synthpop/reference/multi.compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate comparison of synthesised and observed data — multi.compare","text":"","code":"multi.compare(object, data, var = NULL, by = NULL, msel = NULL,    barplot.position = \"fill\", cont.type = \"hist\", y.hist = \"count\",    boxplot.point = TRUE, binwidth = NULL, ...)"},{"path":"https://florianm.github.io/synthpop/reference/multi.compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate comparison of synthesised and observed data — multi.compare","text":"object object class synds, stands 'synthesised      data set'. typically created function syn() includes      object$m synthesised data set(s). data original (observed) data set. var variable compared observed synthetic data within      subgroups. variables tabulated cross-tabulated form groups. barplot.position type barplot. default \"fill\" gives            single bar proportions group \"dodge\" gives      side--side bars numbers category. cont.type default \"hist\" gives histograms \"boxplot\"      gives boxplots. y.hist defines y scale histograms - \"count\" default;     \"density\" gives proportions. boxplot.point default (TRUE) adds individual points boxplots. msel numbers synthetic data sets used - must numbers      range 1:object$m. NULL pooled synthetic data copies      compared original data. binwidth sets width bin histograms. ... additional parameters can supplied ggplot.","code":""},{"path":"https://florianm.github.io/synthpop/reference/multi.compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate comparison of synthesised and observed data — multi.compare","text":"Plots specified . table numbers subgroups printed  R console. Numeric variables fewer 6 distinct values changed factors  order make plots readable.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/multi.compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate comparison of synthesised and observed data — multi.compare","text":"","code":"### default synthesis of selected variables vars <- c(\"sex\", \"age\", \"edu\", \"smoke\") ods  <- na.omit(SD2011[1:1000, vars]) s1 <- syn(ods) #>  #> Synthesis #> ----------- #>  sex age edu smoke  ### categorical var multi.compare(s1, ods, var = \"smoke\", by = c(\"sex\",\"edu\")) #>  #> Plots of  smoke  by  sex edu  #> Numbers in each plot (observed data): #>  #>         edu #> sex      PRIMARY/NO EDUCATION VOCATIONAL/GRAMMAR SECONDARY #>   MALE                     65                189       122 #>   FEMALE                  100                147       190 #>         edu #> sex      POST-SECONDARY OR HIGHER #>   MALE                         69 #>   FEMALE                      115   ### numeric var multi.compare(s1, ods, var = \"age\", by = c(\"sex\"), y.hist = \"density\", binwidth = 5) #>  #> Plots of  age  by  sex  #> Numbers in each plot (observed data): #>  #> sex #>   MALE FEMALE  #>    445    552  #> Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0. #> ℹ Please use `after_stat(density)` instead. #> ℹ The deprecated feature was likely used in the synthpop package. #>   Please report the issue to the authors.  multi.compare(s1, ods, var = \"age\", by = c(\"sex\", \"edu\"), cont.type = \"boxplot\") #>  #> Plots of  age  by  sex edu  #> Numbers in each plot (observed data): #>  #>         edu #> sex      PRIMARY/NO EDUCATION VOCATIONAL/GRAMMAR SECONDARY #>   MALE                     65                189       122 #>   FEMALE                  100                147       190 #>         edu #> sex      POST-SECONDARY OR HIGHER #>   MALE                         69 #>   FEMALE                      115"},{"path":"https://florianm.github.io/synthpop/reference/multinom.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting multinomial models to synthetic data — multinom.synds","title":"Fitting multinomial models to synthetic data — multinom.synds","text":"Fits multinomial models synthesised data set(s)    using multinom function.","code":""},{"path":"https://florianm.github.io/synthpop/reference/multinom.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting multinomial models to synthetic data — multinom.synds","text":"","code":"multinom.synds(formula, data,  ...)"},{"path":"https://florianm.github.io/synthpop/reference/multinom.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting multinomial models to synthetic data — multinom.synds","text":"formula symbolic description model estimated.      typical model form response ~ predictors. See     documentation multinom     formula details. data object class synds, stands     'synthesised data set'. typically created     function syn includes data$m      synthesised data set(s). ... additional parameters passed multinom.","code":""},{"path":"https://florianm.github.io/synthpop/reference/multinom.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting multinomial models to synthetic data — multinom.synds","text":"print results print function (print.fit.synds) can   used. summary function (summary.fit.synds)    can used obtain combined results models fitted  m synthetic data sets. object class fit.synds. list following    components: call original call multinom.synds. mcoefavg combined (average) coefficient estimates. mvaravg combined (average) variance estimates mcoef. analyses object summarising fit synthetic data set     list m objects. Note different      object created summary.multinom make compatible      fitting methods. particular coefficients vectors,      matrices. fitting.function function used fit model. n number cases original data. k number cases synthesised data. proper logical value indicating whether synthetic data      generated using proper synthesis. m number synthetic versions observed data. method vector synthesising methods applied variable     saved synthesised data. incomplete logical value indicating whether dependent variable     model synthesised. mcoef matrix coefficients estimates m syntheses. mvar matrix variance estimates m syntheses.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/multinom.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting multinomial models to synthetic data — multinom.synds","text":"","code":"ods <- SD2011[1:1000, c(\"sex\", \"age\", \"edu\", \"marital\", \"ls\", \"smoke\")] s1 <- syn(ods, m = 3) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu marital ls smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu marital ls smoke #>  #> Synthesis number 3 #> -------------------- #>  sex age edu marital ls smoke f1 <- multinom.synds(edu  ~ sex + age, data = s1) #> # weights:  16 (9 variable) #> initial  value 1383.521772  #> iter  10 value 1294.772418 #> final  value 1285.696403  #> converged #> # weights:  16 (9 variable) #> initial  value 1386.294361  #> iter  10 value 1273.842420 #> final  value 1263.761093  #> converged #> # weights:  16 (9 variable) #> initial  value 1386.294361  #> iter  10 value 1262.171662 #> final  value 1247.177223  #> converged summary(f1) #> Fit to synthetic data set with 3 syntheses. Inference to coefficients #> and standard errors that would be obtained from the original data. #>  #> Call: #> multinom.synds(formula = edu ~ sex + age, data = s1) #>  #> Combined estimates: #>                                      xpct(Beta) xpct(se.Beta) xpct(z) #> VOCATIONAL/GRAMMAR:(Intercept)        3.9537712     0.3709323 10.6590 #> VOCATIONAL/GRAMMAR:sexFEMALE         -0.6207971     0.2062347 -3.0101 #> VOCATIONAL/GRAMMAR:age               -0.0553209     0.0062230 -8.8898 #> SECONDARY:(Intercept)                 3.5204550     0.3748029  9.3928 #> SECONDARY:sexFEMALE                   0.0113225     0.2118300  0.0535 #> SECONDARY:age                        -0.0560482     0.0062994 -8.8973 #> POST-SECONDARY OR HIGHER:(Intercept)  2.9451186     0.3971422  7.4158 #> POST-SECONDARY OR HIGHER:sexFEMALE    0.1721254     0.2317911  0.7426 #> POST-SECONDARY OR HIGHER:age         -0.0555256     0.0067817 -8.1875 #>                                      Pr(>|xpct(z)|)     #> VOCATIONAL/GRAMMAR:(Intercept)            < 2.2e-16 *** #> VOCATIONAL/GRAMMAR:sexFEMALE               0.002611 **  #> VOCATIONAL/GRAMMAR:age                    < 2.2e-16 *** #> SECONDARY:(Intercept)                     < 2.2e-16 *** #> SECONDARY:sexFEMALE                        0.957373     #> SECONDARY:age                             < 2.2e-16 *** #> POST-SECONDARY OR HIGHER:(Intercept)      1.209e-13 *** #> POST-SECONDARY OR HIGHER:sexFEMALE         0.457731     #> POST-SECONDARY OR HIGHER:age              2.667e-16 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 print(f1, msel = 1:2) #> Note: To get more details of the fit see vignette on inference. #>  #> Call: #> multinom.synds(formula = edu ~ sex + age, data = s1) #>  #> Coefficient estimates for selected synthetic data set(s): #>       VOCATIONAL/GRAMMAR:(Intercept) VOCATIONAL/GRAMMAR:sexFEMALE #> syn=1                       3.534370                   -0.8239704 #> syn=2                       3.872562                   -0.5839236 #>       VOCATIONAL/GRAMMAR:age SECONDARY:(Intercept) SECONDARY:sexFEMALE #> syn=1            -0.04386105              3.097754         -0.27181450 #> syn=2            -0.05489998              3.440778          0.06749944 #>       SECONDARY:age POST-SECONDARY OR HIGHER:(Intercept) #> syn=1   -0.04395597                             2.781664 #> syn=2   -0.05639755                             2.944204 #>       POST-SECONDARY OR HIGHER:sexFEMALE POST-SECONDARY OR HIGHER:age #> syn=1                        -0.09530931                  -0.04626379 #> syn=2                         0.19480734                  -0.05857408 compare(f1, ods) #> Error in eval(expr, p): object 'ods' not found"},{"path":"https://florianm.github.io/synthpop/reference/numtocat.syn.html","id":null,"dir":"Reference","previous_headings":"","what":"Group numeric variables before synthesis — numtocat.syn","title":"Group numeric variables before synthesis — numtocat.syn","text":"Selected numeric variables grouped factors ranges selected  data.","code":""},{"path":"https://florianm.github.io/synthpop/reference/numtocat.syn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group numeric variables before synthesis — numtocat.syn","text":"","code":"numtocat.syn(data, numtocat = NULL, print.flag = TRUE, cont.na = NULL,               catgroups = 5, style.groups = \"quantile\")"},{"path":"https://florianm.github.io/synthpop/reference/numtocat.syn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group numeric variables before synthesis — numtocat.syn","text":"data data frame. numtocat vector numbers variable names numeric variables      grouped factors. NULL numeric variables data      grouped. print.flag TRUE list grouped variables printed. cont.na named list gives values named variables      treated separate categories, often missing values like -8. See      corresponding parameter syn(). catgroups single integer vector integers indicating target      number groups variables numtocat order numtocat,      relative postions data. achieved number groups may      different , example fewer ngroups distinct values. style.groups parameter function classInt() determines      breaks used categorise variable chosen. See help file      classInt() details. default setting \"quantile\" makes      groups approximately equal size. divide approximately equal ranges      suggest using \"fisher\".","code":""},{"path":"https://florianm.github.io/synthpop/reference/numtocat.syn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group numeric variables before synthesis — numtocat.syn","text":"list following components: data data frame numeric variables replaced factors grouped      ranges. breaks named list breaks used divide numeric variable      categories. levels named list levels categories numeric      variable. orig data frame original numeric data. cont.na named list levels categorical version      numeric variable. numtocat names variables changed categories. ind positions data  variables changed categories.","code":""},{"path":"https://florianm.github.io/synthpop/reference/numtocat.syn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group numeric variables before synthesis — numtocat.syn","text":"","code":"SD2011.cat <- numtocat.syn(SD2011, cont.na = list(income = -8 , unempdur = -8,  nofriend = -8)) #> Variable(s) age, unempdur, income, mmarr, ymarr, msepdiv, ysepdiv, depress, nofriend, nociga, height, weight, bmi grouped into categories. summary(SD2011.cat$data) #>      sex            age         agegr                       placesize    #>  MALE  :2182   [16,28): 949   16-24: 702   URBAN 500,000 AND OVER: 392   #>  FEMALE:2818   [28,42):1035   25-34: 726   URBAN 200,000-500,000 : 327   #>                [42,54): 960   35-44: 748   URBAN 100,000-200,000 : 843   #>                [54,64):1013   45-59:1361   URBAN 20,000-100,000  : 407   #>                [64,97]:1043   60-64: 516   URBAN BELOW 20,000    : 642   #>                               65+  : 943   RURAL AREAS           :2389   #>                               NA's :   4                                 #>            region                           edu       #>  Mazowieckie  : 570   PRIMARY/NO EDUCATION    : 962   #>  Slaskie      : 500   VOCATIONAL/GRAMMAR      :1613   #>  Wielkopolskie: 413   SECONDARY               :1482   #>  Malopolskie  : 371   POST-SECONDARY OR HIGHER: 936   #>  Lodzkie      : 358   NA's                    :   7   #>  Dolnoslaskie : 319                                   #>  (Other)      :2469                                   #>                                                eduspec     #>  no specialisation                                 :1647   #>  technical science                                 : 911   #>  services for the population and transport services: 441   #>  production and processing                         : 330   #>  agriculture, forestry, fishing                    : 328   #>  (Other)                                           :1323   #>  NA's                                              :  20   #>                         socprof        unempdur             income    #>  RETIRED                    :1241   -8     :1556   -8          :603   #>  EMPLOYED IN PRIVATE SECTOR : 994   [0,24) :2721   [100,860)   :742   #>  EMPLOYED IN PUBLIC SECTOR  : 600   [24,48]: 723   [1200,1500) :586   #>  PUPIL OR STUDENT           : 548                  [1500,2000) :703   #>  OTHER ECONOMICALLY INACTIVE: 444                  [2000,16000]:996   #>  (Other)                    :1140                  [860,1200)  :687   #>  NA's                       :  33                  NA's        :683   #>                marital         mmarr              ymarr         msepdiv     #>  SINGLE            :1253   [1,4)  : 487   [1937,1968): 725   [1,3)  : 107   #>  MARRIED           :2979   [10,12]: 878   [1968,1977): 710   [10,12]: 164   #>  WIDOWED           : 531   [4,6)  : 619   [1977,1985): 717   [3,6)  : 157   #>  DIVORCED          : 199   [6,8)  : 821   [1985,1997): 778   [6,7)  : 104   #>  LEGALLY SEPARATED :   7   [8,10) : 845   [1997,2011]: 750   [7,10) : 168   #>  DE FACTO SEPARATED:  22   NA's   :1350   NA's       :1320   NA's   :4300   #>  NA's              :   9                                                    #>         ysepdiv                       ls         depress     #>  [1944,1990): 135   PLEASED            :1947   [0,2) :1538   #>  [1990,1998): 138   MOSTLY SATISFIED   :1692   [2,5) :1272   #>  [1998,2003): 147   MIXED              : 827   [5,8) :1012   #>  [2003,2007): 138   MOSTLY DISSATISFIED: 274   [8,21]:1089   #>  [2007,2011]: 167   DELIGHTED          : 191   NA's  :  89   #>  NA's       :4275   (Other)            :  61                 #>                     NA's               :   8                 #>                         trust            trustfam         trustneigh   #>  MOST PEOPLE CAN BE TRUSTED: 678   YES       :4470   YES       :2959   #>  ONE CAN`T BE TOO CAREFUL  :3777   NO        : 191   NO        : 955   #>  IT`S DIFFICULT TO TELL    : 508   NO OPINION: 328   NO OPINION:1075   #>  NA's                      :  37   NA's      :  11   NA's      :  11   #>                                                                        #>                                                                        #>                                                                        #>   sport         nofriend     smoke          nociga     alcabuse     alcsol     #>  YES :3236   -8     :  41   YES :1277   [-8,10):3921   YES : 314   YES : 162   #>  NO  :1723   [0,2)  : 490   NO  :3713   [10,60]:1079   NO  :4679   NO  :4756   #>  NA's:  41   [10,99]:1420   NA's:  10                  NA's:   7   NA's:  82   #>              [2,4)  :1144                                                      #>              [4,6)  :1152                                                      #>              [6,10) : 753                                                      #>                                                                                #>   workab       wkabdur                            wkabint     #>  YES : 130   Length:5000        YES, TO EU COUNTRY    : 293   #>  NO  :4432   Class :character   YES, TO NON-EU COUNTRY:  25   #>  NA's: 438   Mode  :character   NO                    :4646   #>                                 NA's                  :  36   #>                                                               #>                                                               #>                                                               #>                   wkabintdur              emcc         englang     #>  LESS THAN 1 YEAR      :  91   GERMANY      : 132   ACTIVE : 787   #>  LESS THAN 1 TO 2 YEARS:  25   GREAT BRITAIN:  43   PASSIVE: 737   #>  MORE THAN 2 YEARS     :  21   NETHERLANDS  :  28   NONE   :3461   #>  FOREVER               :  29   BELGIUM      :  11   NA's   :  15   #>  IT DEPENDS            : 137   FRANCE       :  11                  #>  NA's                  :4697   (Other)      :  61                  #>                                NA's         :4714                  #>        height          weight                        bmi       #>  [116,160): 692   [37,60) : 823   [12.962963,21.96712) : 984   #>  [160,165):1104   [60,70) :1149   [21.96712,24.382373) : 991   #>  [165,170): 837   [70,78) : 980   [24.382373,26.573129): 988   #>  [170,176):1106   [78,86) : 977   [26.573129,29.411765): 967   #>  [176,202]:1226   [86,150]:1018   [29.411765,449.97973]:1011   #>  NA's     :  35   NA's    :  53   NA's                 :  59   #>"},{"path":"https://florianm.github.io/synthpop/reference/polr.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Fitting ordered logistic models to synthetic data — polr.synds","title":"Fitting ordered logistic models to synthetic data — polr.synds","text":"Fits  ordered logistic  models synthesised data set(s)    using polr function.","code":""},{"path":"https://florianm.github.io/synthpop/reference/polr.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fitting ordered logistic models to synthetic data — polr.synds","text":"","code":"polr.synds(formula, data, ...)"},{"path":"https://florianm.github.io/synthpop/reference/polr.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fitting ordered logistic models to synthetic data — polr.synds","text":"formula symbolic description model estimated. typical      model form response ~ predictors. See documentation      polr formula details. data object class synds, stands 'synthesised      data set'. typically created function syn      includes data$m synthesised data set(s). ... additional parameters passed polr.","code":""},{"path":"https://florianm.github.io/synthpop/reference/polr.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fitting ordered logistic models to synthetic data — polr.synds","text":"print results print function (print.fit.synds) can   used. summary function (summary.fit.synds)   can used obtain combined results models fitted  m synthetic data sets. object class fit.synds. list following    components: call original call polr.synds. mcoefavg combined (average) coefficient estimates. mvaravg combined (average) variance estimates mcoef. analyses object summarising fit synthetic data set     list m objects. Note different       object created summary.polr make compatible      fitting methods compare.fit.synds summary.fit.synds      functions. particular coefficients combine items coefficients      zeta summary.polr make combined vector coefficients. fitting.function function used fit model. n number cases original data. k number cases synthesised data. proper logical value indicating whether synthetic data      generated using proper synthesis. m number synthetic versions observed data. method vector synthesising methods applied variable     saved synthesised data. incomplete logical value indicating whether dependent variable     model synthesised. mcoef matrix coefficients estimates m syntheses. mvar matrix variance estimates m syntheses.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/polr.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fitting ordered logistic models to synthetic data — polr.synds","text":"","code":"ods <- SD2011[1:1000, c(\"sex\", \"age\", \"edu\", \"marital\", \"ls\", \"smoke\")] s1 <- syn(ods, m = 3) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu marital ls smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu marital ls smoke #>  #> Synthesis number 3 #> -------------------- #>  sex age edu marital ls smoke f1 <- polr.synds(edu  ~ sex + age, data = s1) summary(f1) #> Fit to synthetic data set with 3 syntheses. Inference to coefficients #> and standard errors that would be obtained from the original data. #>  #> Call: #> polr.synds(formula = edu ~ sex + age, data = s1) #>  #> Combined estimates: #>                                         xpct(Beta) xpct(se.Beta)  xpct(z) #> sexFEMALE                                0.4368221     0.1169414   3.7354 #> age                                     -0.0243097     0.0032899  -7.3891 #> PRIMARY/NO EDUCATION|VOCATIONAL/GRAMMAR -2.5882275     0.1859668 -13.9177 #> VOCATIONAL/GRAMMAR|SECONDARY            -0.8252933     0.1657613  -4.9788 #> SECONDARY|POST-SECONDARY OR HIGHER       0.6785531     0.1708250   3.9722 #>                                         Pr(>|xpct(z)|)     #> sexFEMALE                                    0.0001874 *** #> age                                          1.478e-13 *** #> PRIMARY/NO EDUCATION|VOCATIONAL/GRAMMAR      < 2.2e-16 *** #> VOCATIONAL/GRAMMAR|SECONDARY                 6.398e-07 *** #> SECONDARY|POST-SECONDARY OR HIGHER           7.121e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 print(f1, msel = 1:2) #> Note: To get more details of the fit see vignette on inference. #>  #> Call: #> polr.synds(formula = edu ~ sex + age, data = s1) #>  #> Coefficient estimates for selected synthetic data set(s): #>       sexFEMALE         age PRIMARY/NO EDUCATION|VOCATIONAL/GRAMMAR #> syn=1 0.4804041 -0.02600279                               -2.597905 #> syn=2 0.4285167 -0.02511632                               -2.611456 #>       VOCATIONAL/GRAMMAR|SECONDARY SECONDARY|POST-SECONDARY OR HIGHER #> syn=1                   -0.8765166                          0.6796282 #> syn=2                   -0.9157610                          0.5954985 compare(f1, ods) #> Error in eval(expr, p): object 'ods' not found"},{"path":"https://florianm.github.io/synthpop/reference/read.obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Importing original data sets form external files — read.obs","title":"Importing original data sets form external files — read.obs","text":"Imports data data sets form external files data frame.  Currently supported files include: sav (SPSS), dta (Stata), xpt (SAS), csv (comma-separated file), tab (tab-delimited file)  txt (delimited text files). SPSS, Stata SAS uses functions  foreign package adjustments necessary.","code":""},{"path":"https://florianm.github.io/synthpop/reference/read.obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Importing original data sets form external files — read.obs","text":"","code":"read.obs(file, convert.factors = TRUE, lab.factors = FALSE,  export.lab = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/read.obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Importing original data sets form external files — read.obs","text":"file name file (including extension) data     read . convert.factors logical value indicating whether variables    value labels Stata SPSS converted R factors    levels. lab.factors logical value indicating whether variables    complete value labels imported using numeric codes    (convert.factors = FALSE) converted    numeric factor variables. export.lab logical variable indicating whether labels SPSS    Stata exported external file. ... additional parameters passed read functions.","code":""},{"path":"https://florianm.github.io/synthpop/reference/read.obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Importing original data sets form external files — read.obs","text":"data frame imported data set. SPSS, Stata SAS  attributes labels.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/replicated.uniques.html","id":null,"dir":"Reference","previous_headings":"","what":"Replications in synthetic data — replicated.uniques","title":"Replications in synthetic data — replicated.uniques","text":"Determines unique units synthesised data set(s)   replicates unique units original observed data set.","code":""},{"path":"https://florianm.github.io/synthpop/reference/replicated.uniques.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replications in synthetic data — replicated.uniques","text":"","code":"replicated.uniques(object, data, exclude = NULL)"},{"path":"https://florianm.github.io/synthpop/reference/replicated.uniques.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replications in synthetic data — replicated.uniques","text":"object object class synds, stands     'synthesised data set'. typically created     function syn() includes object$m      synthesised data set(s). data original observed data set. exclude single string vector strings name(s)      variable(s) excluded identification uniques.","code":""},{"path":"https://florianm.github.io/synthpop/reference/replicated.uniques.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replications in synthetic data — replicated.uniques","text":"list following components: replications vector (object$m = 1) data frame    object$m columns (object$m > 1) logical     values indicateing duplicates mth synthetic data set. .replications single number vector object$m integers    indicating number duplicates synthetic data set(s). .uniques number unique individuals original data set. per.replications single number vector object$m numeric     values indicating percentage duplicates synthetic data set(s).","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/replicated.uniques.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replications in synthetic data — replicated.uniques","text":"","code":"ods <- SD2011[1:1000,c(\"sex\",\"age\",\"edu\",\"marital\",\"smoke\")] s1 <- syn(ods, m = 2) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu marital smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu marital smoke replicated.uniques(s1,ods) #> $replicationsno.uniques #> [1] 425 #>  #> $no.replications #> [1] 102  89 #>  #> $per.replications #> [1] 10.2  8.9 #>"},{"path":"https://florianm.github.io/synthpop/reference/sdc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tools for statistical disclosure control (sdc) — sdc","title":"Tools for statistical disclosure control (sdc) — sdc","text":"Labeling removing unique replicates unique actual (observed) individuals.","code":""},{"path":"https://florianm.github.io/synthpop/reference/sdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tools for statistical disclosure control (sdc) — sdc","text":"","code":"sdc(object, data, label = NULL, rm.replicated.uniques = FALSE,   uniques.exclude = NULL, recode.vars = NULL, bottom.top.coding = NULL,   recode.exclude = NULL, smooth.vars = NULL)"},{"path":"https://florianm.github.io/synthpop/reference/sdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tools for statistical disclosure control (sdc) — sdc","text":"object object class synds, stands     'synthesised data set'. typically created     function syn() includes object$m      synthesised data set(s). data original (observed) data set. label single string label added synthetic data      sets new variable make clear data synthetic/fake. rm.replicated.uniques logical value indicating whether unique      replicates units unique also orginal data set      removed. uniques.exclude single string vector strings name(s)      variable(s) excluded identification uniques. recode.vars single string vector strings name(s)      variable(s) bottom- /top-coded. bottom.top.coding list two-element vectors specifing      bottom top codes variable recode.vars.      need bottom top coding NA used.     one variable recoded, codes can given      two-element vector. recode.exclude list specifying variable      recode.vars values excluded recoding, e.g. missing data      codes. values considered recoding NA      used. one variable recoded, code(s) can given      single number vector. smooth.vars single string vector strings name(s)      numeric variable(s) smoothed (smooth.spline function used).","code":""},{"path":"https://florianm.github.io/synthpop/reference/sdc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tools for statistical disclosure control (sdc) — sdc","text":"object provided argument adjusted accordance    parameters' values.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/sdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tools for statistical disclosure control (sdc) — sdc","text":"","code":"ods <- SD2011[1:1000,c(\"sex\",\"age\",\"edu\",\"marital\",\"income\")] s1 <- syn(ods, m = 2) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu marital income #>  #> Synthesis number 2 #> -------------------- #>  sex age edu marital income s1.sdc <- sdc(s1, ods, label=\"false_data\", rm.replicated.uniques = TRUE, recode.vars = c(\"age\",\"income\"), bottom.top.coding = list(c(20,80),c(NA,2000)), recode.exclude = list(NA,c(NA,-8))) #>  #> m = 1 #> age: no. of bottom-coded values - 51, no. of top-coded values - 39 #> income: no. of bottom-coded values - 0, no. of top-coded values - 122 #> m = 2 #> age: no. of bottom-coded values - 48, no. of top-coded values - 32 #> income: no. of bottom-coded values - 0, no. of top-coded values - 147 #> no. of replicated uniques: 127, 113"},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference from synthetic data — summary.fit.synds","title":"Inference from synthetic data — summary.fit.synds","text":"Combines results models fitted m    synthetic data sets.","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference from synthetic data — summary.fit.synds","text":"","code":"# S3 method for fit.synds summary(object, population.inference = FALSE, msel = NULL,   real.varcov = NULL, incomplete = NULL, ...)  # S3 method for summary.fit.synds print(x, ...)"},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference from synthetic data — summary.fit.synds","text":"object object class fit.synds created fitting model     synthesised data set using function glm.synds,     lm.synds,multinom.synds polr.synds. population.inference logical value indicating whether inference     made population quantities. FALSE inference made    results expected analysis original data.     option selected synthetic data used     exploratory analysis, final published results obtained     running code original confidential data. population.inference = TRUE     results allow population inference made synthetic data.     cases inference depend synthesising model     correct, can checked running analysis real     data, see compare.fit.synds. msel index indices synthetic datasets (1, ...,    m), summaries fitted models produced.     NULL (default) summary combined estimates produced. real.varcov estimated variance-covariance matrix fit     model original data. parameter used function     compare.fit.synds original data one parameters. incomplete Logical variable whether population inference     incomplete synthesis used. left NULL value     determined whether dependent variable synthesised.     See also output. ... additional parameters. x object class summary.fit.synds.","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inference from synthetic data — summary.fit.synds","text":"mean estimates m synthetic data sets  yields asymptotically unbiased estimates coefficients observed  data conform distribution used synthesis. standard errors  estimated differently depending whether inference made results  expect obtain observed data parameters  population assume observed data sampled . standard  errors also differ according whether synthetic data produced using  simple proper synthesis (details see Raab et al. (2017)).","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference from synthetic data — summary.fit.synds","text":"object class summary.fit.synds list    following components: call original call glm.synds lm.synds. proper logical value indicating whether synthetic data      generated using proper synthesis. population.inference logical value indicating whether inference      made population coefficients results expected      analysis original data (see ). incomplete logical value indicating whether dependent variable      model synthesised. derived synthpop      implementation fitting functions (lm.synds,      glm.synds, multinom.synds      polr.synds) saved fitted object.      TRUE inference population.inference = TRUE uses      method proposed Reiter (2003) terms partially synthetic     data. method requires multiple syntheses (m > 1).      m = 1, incomplete = TRUE population.inference = TRUE      results still calculated returned warning.     usually give standard errors larger .      method can forced setting incomplete = TRUE parameter      can also used complete synthesis. fitting.function function used fit model. m number synthetic versions original (observed) data. coefficients matrix combined estimates. inference      required results obtained analysis      original data, (population.inference = FALSE) coefficients      given xpct(Beta), standard errors xpct(se.Beta)     corresponding Z-statistic xpct(Z). synthetic data      used make inferences population quantities      (population.inference = TRUE), coefficients given      Beta.syn, standard errors se.Beta.syn      Z-statistic Z.syn (see vignette inference details). n number cases original data. k number cases synthesised data. Note k      n equal population.inference = FALSE      (default), standard errors produced estimate      expected analysis original data set size n. analyses summary.glm summary.lm object respectively     list m objects. msel index indices synthetic data copies summaries      fitted models produced. NULL summary combined      estimates produced.","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inference from synthetic data — summary.fit.synds","text":"Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 . Raab, G.M., Nowok, B. Dibben, C. (2017). Practical data synthesis    large samples. Journal Privacy Confidentiality, 7(3),    67-97. Available :    https://journalprivacyconfidentiality.org/index.php/jpc/article/view/407 Reiter, J.P. (2003) Inference partially synthetic, public use microdata    sets. Survey Methodology, 29, 181-188.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/summary.fit.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference from synthetic data — summary.fit.synds","text":"","code":"ods <- SD2011[1:1000,c(\"sex\",\"age\",\"edu\",\"ls\",\"smoke\")]    ### simple synthesis s1 <- syn(ods, m = 5) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 3 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 4 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 5 #> -------------------- #>  sex age edu ls smoke f1 <- glm.synds(smoke ~ sex + age + edu + ls, data = s1, family = \"binomial\") summary(f1) #> Fit to synthetic data set with 5 syntheses. Inference to coefficients #> and standard errors that would be obtained from the original data. #>  #> Call: #> glm.synds(formula = smoke ~ sex + age + edu + ls, family = \"binomial\",  #>     data = s1) #>  #> Combined estimates: #>                              xpct(Beta) xpct(se.Beta) xpct(z) Pr(>|xpct(z)|)    #> (Intercept)                   0.9745700     0.5861108  1.6628       0.096358 .  #> sexFEMALE                     0.2047752     0.1542458  1.3276       0.184313    #> age                           0.0116889     0.0045288  2.5810       0.009851 ** #> eduVOCATIONAL/GRAMMAR        -0.2396194     0.2352234 -1.0187       0.308351    #> eduSECONDARY                  0.3876494     0.2499626  1.5508       0.120942    #> eduPOST-SECONDARY OR HIGHER   0.6276637     0.2904354  2.1611       0.030687 *  #> lsPLEASED                    -0.5089977     0.5136113 -0.9910       0.321677    #> lsMOSTLY SATISFIED           -0.6251458     0.5165873 -1.2101       0.226223    #> lsMIXED                      -0.7937970     0.5334960 -1.4879       0.136773    #> lsMOSTLY DISSATISFIED        -1.3384436     0.5740387 -2.3316       0.019720 *  #> lsUNHAPPY                    -0.6985544     1.0510931 -0.6646       0.506308    #> lsTERRIBLE                   -4.4080390   239.4448143 -0.0184       0.985312    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 summary(f1, population.inference = TRUE) #> Fit to synthetic data set with 5 syntheses. Inference to population #> coefficients when all variables in the model are synthesised. #>  #> Call: #> glm.synds(formula = smoke ~ sex + age + edu + ls, family = \"binomial\",  #>     data = s1) #>  #> Combined estimates: #>                               Beta.syn se.Beta.syn   z.syn Pr(>|z.syn|)   #> (Intercept)                   0.974570    0.642052  1.5179      0.12904   #> sexFEMALE                     0.204775    0.168968  1.2119      0.22554   #> age                           0.011689    0.004961  2.3561      0.01847 * #> eduVOCATIONAL/GRAMMAR        -0.239619    0.257674 -0.9299      0.35241   #> eduSECONDARY                  0.387649    0.273820  1.4157      0.15686   #> eduPOST-SECONDARY OR HIGHER   0.627664    0.318156  1.9728      0.04852 * #> lsPLEASED                    -0.508998    0.562633 -0.9047      0.36564   #> lsMOSTLY SATISFIED           -0.625146    0.565893 -1.1047      0.26929   #> lsMIXED                      -0.793797    0.584416 -1.3583      0.17438   #> lsMOSTLY DISSATISFIED        -1.338444    0.628828 -2.1285      0.03330 * #> lsUNHAPPY                    -0.698554    1.151415 -0.6067      0.54406   #> lsTERRIBLE                   -4.408039  262.298652 -0.0168      0.98659   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1    ### proper synthesis s2 <- syn(ods, m = 5, method = \"parametric\", proper = TRUE) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 2 #> -------------------- #>  sex age edu ls #> Warning: NaNs produced #>  smoke #>  #> Synthesis number 3 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 4 #> -------------------- #>  sex age edu ls smoke #>  #> Synthesis number 5 #> -------------------- #>  sex age edu ls smoke f2 <- glm.synds(smoke ~ sex + age + edu + ls, data = s2, family = \"binomial\") summary(f2) #> Fit to synthetic data set with 5 syntheses. Inference to coefficients #> and standard errors that would be obtained from the original data. #>  #> Call: #> glm.synds(formula = smoke ~ sex + age + edu + ls, family = \"binomial\",  #>     data = s2) #>  #> Combined estimates: #>                              xpct(Beta) xpct(se.Beta) xpct(z) Pr(>|xpct(z)|)   #> (Intercept)                   4.3854770   220.5827624  0.0199        0.98414   #> sexFEMALE                     0.2592300     0.1590040  1.6303        0.10303   #> age                           0.0098726     0.0047012  2.1000        0.03573 * #> eduVOCATIONAL/GRAMMAR        -0.4238052     0.2522667 -1.6800        0.09296 . #> eduSECONDARY                  0.0580690     0.2657045  0.2185        0.82700   #> eduPOST-SECONDARY OR HIGHER   0.1410270     0.3010880  0.4684        0.63950   #> lsPLEASED                    -3.4896266   220.5825272 -0.0158        0.98738   #> lsMOSTLY SATISFIED           -3.6498152   220.5825317 -0.0165        0.98680   #> lsMIXED                      -4.0814974   220.5825749 -0.0185        0.98524   #> lsMOSTLY DISSATISFIED        -4.3052827   220.5827183 -0.0195        0.98443   #> lsUNHAPPY                     1.9895409   389.2885438  0.0051        0.99592   #> lsTERRIBLE                   -5.1654552   220.5841766 -0.0234        0.98132   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 summary(f2, population.inference = TRUE) #> Fit to synthetic data set with 5 syntheses. Inference to population #> coefficients when all variables in the model are synthesised. #>  #> Call: #> glm.synds(formula = smoke ~ sex + age + edu + ls, family = \"binomial\",  #>     data = s2) #>  #> Combined estimates: #>                                Beta.syn se.Beta.syn   z.syn Pr(>|z.syn|)   #> (Intercept)                   4.3854770 260.9970442  0.0168      0.98659   #> sexFEMALE                     0.2592300   0.1881361  1.3779      0.16824   #> age                           0.0098726   0.0055625  1.7748      0.07592 . #> eduVOCATIONAL/GRAMMAR        -0.4238052   0.2984860 -1.4198      0.15565   #> eduSECONDARY                  0.0580690   0.3143858  0.1847      0.85346   #> eduPOST-SECONDARY OR HIGHER   0.1410270   0.3562521  0.3959      0.69221   #> lsPLEASED                    -3.4896266 260.9967659 -0.0134      0.98933   #> lsMOSTLY SATISFIED           -3.6498152 260.9967713 -0.0140      0.98884   #> lsMIXED                      -4.0814974 260.9968224 -0.0156      0.98752   #> lsMOSTLY DISSATISFIED        -4.3052827 260.9969921 -0.0165      0.98684   #> lsUNHAPPY                     1.9895409 460.6124168  0.0043      0.99655   #> lsTERRIBLE                   -5.1654552 260.9987176 -0.0198      0.98421   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic data object summaries — summary.synds","title":"Synthetic data object summaries — summary.synds","text":"Produces summaries synthesised variables. one  synthetic data set generated (object$m > 1), default summaries  calculated averaging summary values synthetic data copies (see msel argument).","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic data object summaries — summary.synds","text":"","code":"# S3 method for synds summary(object, msel = NULL, maxsum = 7,    digits = max(3, getOption(\"digits\")-3), ...)  # S3 method for summary.synds print(x, ...)"},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthetic data object summaries — summary.synds","text":"object object class synds; result call      syn. msel index indices synthetic data copies summary      desired. NULL (default) summaries calculated averaging      summary values synthetic data copies. maxsum integer, indicating many levels shown factors. digits integer, used number formatting format. ... additional arguments passed summary. x object class summary.synds.","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthetic data object summaries — summary.synds","text":"See summary details.","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthetic data object summaries — summary.synds","text":"object class summary.synds, list following    components: m number synthetic versions original (observed) data. msel index indices synthetic data copies summary      produced. NULL summaries calculated averaging      summary values synthetic data copies. method vector synthesising methods applied variable     saved synthesised data. result table list tabels (one synthetic data      set selected) summaries synthesised variables.","code":""},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthetic data object summaries — summary.synds","text":"Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 .","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/summary.synds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic data object summaries — summary.synds","text":"","code":"s1 <- syn(SD2011[,c(\"sex\",\"age\",\"edu\",\"marital\")], m = 3) #>  #> Synthesis number 1 #> -------------------- #>  sex age edu marital #>  #> Synthesis number 2 #> -------------------- #>  sex age edu marital #>  #> Synthesis number 3 #> -------------------- #>  sex age edu marital summary(s1) #> Synthetic object with 3 syntheses using methods: #>      sex      age      edu  marital  #> \"sample\"   \"cart\"   \"cart\"   \"cart\"  #>  #> Summary (average) for all synthetic data sets: #>      sex            age                              edu           #>  MALE  :2189   Min.   :16.00   PRIMARY/NO EDUCATION    : 932.333   #>  FEMALE:2811   1st Qu.:32.00   VOCATIONAL/GRAMMAR      :1621.667   #>                Median :48.33   SECONDARY               :1485.667   #>                Mean   :47.57   POST-SECONDARY OR HIGHER: 951.667   #>                3rd Qu.:61.00   NA's                    :   8.667   #>                Max.   :95.33                                       #>                                                                    #>                marital         #>  SINGLE            :1243.000   #>  MARRIED           :2996.000   #>  WIDOWED           : 525.000   #>  DIVORCED          : 195.000   #>  LEGALLY SEPARATED :   8.667   #>  DE FACTO SEPARATED:  24.333   #>  NA's              :   8.000   summary(s1, msel = c(1,3)) #> Synthetic object with 3 syntheses using methods: #>      sex      age      edu  marital  #> \"sample\"   \"cart\"   \"cart\"   \"cart\"  #>  #> Summary for synthetic data set 1: #>      sex            age                              edu       #>  MALE  :2234   Min.   :16.00   PRIMARY/NO EDUCATION    : 917   #>  FEMALE:2766   1st Qu.:32.00   VOCATIONAL/GRAMMAR      :1635   #>                Median :48.00   SECONDARY               :1486   #>                Mean   :47.42   POST-SECONDARY OR HIGHER: 953   #>                3rd Qu.:61.00   NA's                    :   9   #>                Max.   :97.00                                   #>                                                                #>                marital     #>  SINGLE            :1247   #>  MARRIED           :3014   #>  WIDOWED           : 522   #>  DIVORCED          : 178   #>  LEGALLY SEPARATED :  10   #>  DE FACTO SEPARATED:  23   #>  NA's              :   6   #>  #> Summary for synthetic data set 3: #>      sex            age                              edu       #>  MALE  :2188   Min.   :16.00   PRIMARY/NO EDUCATION    : 955   #>  FEMALE:2812   1st Qu.:32.00   VOCATIONAL/GRAMMAR      :1630   #>                Median :48.00   SECONDARY               :1481   #>                Mean   :47.62   POST-SECONDARY OR HIGHER: 924   #>                3rd Qu.:61.00   NA's                    :  10   #>                Max.   :97.00                                   #>                                                                #>                marital     #>  SINGLE            :1233   #>  MARRIED           :2992   #>  WIDOWED           : 536   #>  DIVORCED          : 196   #>  LEGALLY SEPARATED :   9   #>  DE FACTO SEPARATED:  24   #>  NA's              :  10"},{"path":"https://florianm.github.io/synthpop/reference/syn.bag.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis with bagging — syn.bag","title":"Synthesis with bagging — syn.bag","text":"Generates univariate synthetic data using bagging. uses  randomForest function randomForest package  number sampled predictors equal number predictors.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.bag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis with bagging — syn.bag","text":"","code":"syn.bag(y, x, xp, smoothing = \"\", proper = FALSE, ntree = 10, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.bag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis with bagging — syn.bag","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. smoothing smoothing method numeric variable. See      syn.smooth. proper proper synthesis (proper = TRUE) model fitted      bootstrapped sample original data. ntree number trees grow. ... additional parameters passed      randomForest.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.bag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis with bagging — syn.bag","text":"...","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.bag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis with bagging — syn.bag","text":"list two components: res vector length k synthetic values y. fit model fitted observed data used produce      synthetic values.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.bag.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesis with bagging — syn.bag","text":"...","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.cart.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","title":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","text":"Generates univariate synthetic data using classification   regression trees (without bootstrap).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.cart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","text":"","code":"syn.ctree(y, x, xp, smoothing = \"\", proper = FALSE,            minbucket = 5, mincriterion = 0.9, ...) syn.cart(y, x, xp, smoothing = \"\", proper = FALSE,           minbucket = 5, cp = 1e-08, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.cart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. smoothing smoothing method numeric variable. See      syn.smooth. proper proper synthesis (proper = TRUE) CART      model fitted bootstrapped sample original data. minbucket minimum number observations     terminal node. See rpart.control     ctree_control details. cp complexity parameter. split     decrease overall lack fit factor cp     attempted. Small values cp grow large trees.      See rpart.control details. mincriterion 1 - p-value test must      exceeded split retained. Small values      mincriterion grow large trees.      See ctree_control details. ... additional parameters passed      ctree_control syn.ctree      rpart.control syn.cart.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.cart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","text":"procedure synthesis CART model    follows: Fit classification    regression tree binary recursive partitioning. xp find terminal node. Randomly    draw donor members node take observed    value y draw synthetic value. syn.ctree uses ctree function   party package syn.cart uses rpart   function rpart package. differ, among others,    selection splitting variable stopping rule    splitting process. Guassian kernel smoothing can applied continuous variables    setting smoothing parameter \"density\". recommended    tool decrease disclosure risk. Increasing minbucket   another means data protection. CART models suggested generation synthetic data    Reiter (2005) evaluated Drechsler Reiter (2011).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.cart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","text":"list two components: res vector length k synthetic values y. fit fitted model object class rpart.object      ctree.object can printed plotted.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.cart.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesis with classification and regression trees (CART) — syn.ctree, syn.cart","text":"Reiter, J.P. (2005). Using CART generate partially synthetic,    public use microdata. Journal Official Statistics,    21(3), 441--462. Drechsler, J. Reiter, J.P. (2011). empirical evaluation easily    implemented, nonparametric methods generating synthetic datasets.   Computational Statistics Data Analysis, 55(12), 3232--3243.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.catall.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis of a group of categorical variables from a saturated model — syn.catall","title":"Synthesis of a group of categorical variables from a saturated model — syn.catall","text":"saturated model fitted table produced cross-tabulating   variables.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.catall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis of a group of categorical variables from a saturated model — syn.catall","text":"","code":"syn.catall(x, k, proper = FALSE, priorn = 1, structzero = NULL,             maxtable = 1e8, epsilon = 0, rand = TRUE,  ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.catall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis of a group of categorical variables from a saturated model — syn.catall","text":"x data frame (n x p) set original variables. k number rows synthetic data set - defaults n. proper proper = TRUE x replaced bootstrap      sample synthesis, thus effectively sampling posterior      distribution model, given data. priorn sum parameters Dirichelet prior can      thought pseudo-count giving number observations inform      prior knowledge parameters. structzero named list lists defines cells table      structural zeros remain zeros synthetic data,      leaving prior zeros. element structzero list      list describes set cells table defined combination      two variables name element must consist      variable names seperated underscore, e.g. sex_edu.      length element determined number variables      component gives variable levels (numeric labels) define      structural zero cells (see example ). maxtable number cells cross-tabulation variables     trigger severe warning. epsilon measures scale laplace noise added differential      privacy (DP) rand DP versions determines multinomial noise added      DP counts. set false DP adjusted counts simply rounded      whole number manner preserves desired sample size (k). ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.catall.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis of a group of categorical variables from a saturated model — syn.catall","text":"used syn function group categorical variables  method = \"catall\" must together start  visit.sequence. Subsequent variables visit.sequence  synthesised conditional synthesised values grouped variables. saturated model fitted table produced cross-tabulating  variables. Prior probabilities proportions cell table specified parameters Dirichlet distribution  parameter every cell table structural zero (see ). sum parameters priorn one \\(priorn/N\\) \\(N\\) number cells table structural zeros. default priorn = 1 can thought equivalent knowledge  1 observation equally likely cell  structural zero. posterior expectation, given observed counts, probability cell observed count \\(n_i\\) thus \\((n_i + priorn/N) / (N + priorn)\\). synthetic data generated  multinomial distribution parameters given probabilities. Unlike syn.satcat, fits saturated conditional models, synthesised data can include combination variables, except  defined combinations variables structzero. NOTE function called setting elements method  syn() \"catall\", parameters priorn, structzero,  maxtable, epsilon, rand must supplied syn  e.g. catall.priorn.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.catall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis of a group of categorical variables from a saturated model — syn.catall","text":"list two components: res data frame dimension k x p containing synthesised data. fit cross-tabulation original variables used.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.catall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesis of a group of categorical variables from a saturated model — syn.catall","text":"","code":"ods <- SD2011[, c(1, 4, 5, 6, 2, 10, 11)] table(ods[, c(\"placesize\", \"region\")]) #>                         region #> placesize                Dolnoslaskie Kujawsko-pomorskie Lodzkie Lubelskie #>   URBAN 500,000 AND OVER           60                  0      94         0 #>   URBAN 200,000-500,000            30                 15       0         0 #>   URBAN 100,000-200,000            64                 28      66        41 #>   URBAN 20,000-100,000              0                 69       0        46 #>   URBAN BELOW 20,000               57                 45      31        28 #>   RURAL AREAS                     108                156     167       186 #>                         region #> placesize                Lubuskie Malopolskie Mazowieckie Opolskie Podkarpackie #>   URBAN 500,000 AND OVER        0          64         126        0            0 #>   URBAN 200,000-500,000        33          10          10       19           17 #>   URBAN 100,000-200,000        13          40          78       37           47 #>   URBAN 20,000-100,000          0           0          23        0            0 #>   URBAN BELOW 20,000           42          37          72       24           37 #>   RURAL AREAS                  65         220         261       73          212 #>                         region #> placesize                Podlaskie Pomorskie Slaskie Swietokrzyskie #>   URBAN 500,000 AND OVER         0         0       0              0 #>   URBAN 200,000-500,000          0         0     120              0 #>   URBAN 100,000-200,000         31        64     121             38 #>   URBAN 20,000-100,000          45        76      71             35 #>   URBAN BELOW 20,000            25        35      28             30 #>   RURAL AREAS                   92       131     160            127 #>                         region #> placesize                Warminsko-mazurskie Wielkopolskie Zachodnio-pomorskie #>   URBAN 500,000 AND OVER                   0            48                   0 #>   URBAN 200,000-500,000                   42            10                  21 #>   URBAN 100,000-200,000                   43            88                  44 #>   URBAN 20,000-100,000                     0             0                  42 #>   URBAN BELOW 20,000                      45            53                  53 #>   RURAL AREAS                            129           214                  88  # Each `placesize_region` sublist:  # for each relevant level of `placesize` defined in the first element,  # the second element defines regions (variable `region`) that do not  # have places of that size.  struct.zero <- list(   placesize_region = list(placesize = \"URBAN 500,000 AND OVER\",                            region = c(2, 4, 5, 8:13, 16)),   placesize_region = list(placesize = \"URBAN 200,000-500,000\",                            region = c(3, 4, 10:11, 13)),   placesize_region = list(placesize = \"URBAN 20,000-100,000\",                            region = c(1, 3, 5, 6, 8, 9, 14:15)))  syncatall <- syn(ods, method = c(rep(\"catall\", 4), \"ctree\", \"normrank\", \"ctree\"),                  catall.priorn = 2, catall.structzero = struct.zero) #>  #> Synthesis #> ----------- #> First 4 variables (sex, placesize, region, edu) synthesised together by method 'catall' #> Error in sampler.syn(p, data, m, syn, visit.sequence, rules, rvalues,     event, proper, print.flag, k, pred.not.syn, models, numtocat,     ...): object 'struct.zero' not found"},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating synthetic data sets — syn","title":"Generating synthetic data sets — syn","text":"Generates synthetic version(s) data set. Function syn.strata()    performs stratified synthesis.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating synthetic data sets — syn","text":"","code":"syn(data, method = \"cart\", visit.sequence = (1:ncol(data)),     predictor.matrix = NULL,       m = 1, k = nrow(data), proper = FALSE,      minnumlevels = 1, maxfaclevels = 60,      rules = NULL, rvalues = NULL,      cont.na = NULL, semicont = NULL,      smoothing = NULL, event = NULL, denom = NULL,      drop.not.used = FALSE, drop.pred.only = FALSE,      default.method = c(\"normrank\", \"logreg\", \"polyreg\", \"polr\"),     numtocat = NULL, catgroups = rep(5, length(numtocat)),      models = FALSE, print.flag = TRUE, seed = \"sample\", ...)      syn.strata(data, strata = NULL,      minstratumsize = 10 + 10 * length(visit.sequence),       tab.strataobs = TRUE, tab.stratasyn = FALSE,     method = \"cart\", visit.sequence = (1:ncol(data)),     predictor.matrix = NULL,     m = 1, k = nrow(data), proper = FALSE,      minnumlevels = 1, maxfaclevels = 60,      rules = NULL, rvalues = NULL,     cont.na = NULL, semicont = NULL,      smoothing = NULL, event = NULL, denom = NULL,      drop.not.used = FALSE, drop.pred.only = FALSE,     default.method = c(\"normrank\", \"logreg\", \"polyreg\", \"polr\"),     numtocat = NULL, catgroups = rep(5,length(numtocat)),      models = FALSE, print.flag = TRUE, seed = \"sample\", ...)         # S3 method for synds print(x, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating synthetic data sets — syn","text":"data data frame matrix (n x p) containing       original data. Observations rows variables columns. method single string vector strings length      ncol(data) specifying synthesising method      used variable data. Order variables exactly      data. specified single string, method      used variables visit sequence unless data type      position visit sequence requires different method.       method set \"parametric\"      default synthesising method specified default.method argument      applied. Variables transformations variables can      synthesised using passive method specified string       starting ~ (see syn.passive). Variables need       synthesised empty method \"\". default       variables synthesised using \"cart\" method,       rpart implementation CART model (see syn.cart).       See details information method. visit.sequence character vector names variables integer       vector column indices specifying order synthesis.      default sequence 1:ncol(data) implies column variables      synthesised left right. See details information. predictor.matrix square matrix size ncol(data) specifying      set column predictors used target variable row.      entry value 0 1. value 1 means column      variable used predictor row variable. Order      variables exactly data. default      variables earlier visit sequence used predictors.      default visit sequence (1:ncol(data)) default      predictor.matrix values 1 lower triangle.      See details information. m number synthetic copies original (observed) data       generated. default m = 1. k size synthetic data set (k x p),      can smaller greater size original data       set (n x p). default nrow(data) means       number individuals synthesised data       original (observed) data (k = n). proper logical value default set FALSE.       TRUE proper synthesis conducted. minnumlevels minimum number values numeric variable exceed      treated numeric synthesis. Numeric variables       minnumlevels fewer distinct values changed factors.       set 1 (default) numeric variables left unchanged unless       one non-missing value. maxfaclevels maximum number factor levels can handled.      can increased allow synthesis run large value may      cause computational problems, especially parametric methods. rules named list rules restricted values. Restricted values       determined explicitly values variables.      names list elements must correspond variables names       rules need specified. rvalues named list values corresponding rules      specified rules. cont.na named list codes missing values continuous      variables different R missing data code NA.      names list elements must correspond variables names       missing data codes need specified. semicont named list values semi-continuous      variables spikes. names list elements must correspond       names semi-continuous variables. smoothing single string specifying smoothing method numeric       variables data named list specifying smoothing method       used selected variables. Avaliable methods include: \"spline\"       (recommended), \"rmean\", \"density\", \"\").      Smoothing can applied continuous variables synthesised using       sample, ctree, cart, rf, bag,       ranger, normrank, pmm nested method.       names list elements must correspond names       variables whose values smoothed. Smoothing applied       synthesised values. details see syn.smooth. event named list specifying survival data names       corresponding event indicators. names list elements       must correspond names survival variables. denom named list specifying variables modelled using       binomial regression names corresponding denominator variables.       names list elements must correspond names       variables modelled using binomial regression. drop..used logical value. TRUE (default) variables       used synthesis saved synthesised data       included corresponding synthesis parameters. drop.pred.logical value. TRUE (default) variables       synthesised used predictors saved synthesised       data. default.method vector four strings containing default      parametric synthesising methods numerical variables, factors       two levels, unordered factors two levels       ordered factors two levels respectively.       used method set \"parametric\"       inconsistency variable type provided method. numtocat vector numbers names indicate columns data     divided groups allow grouped variables      synthesised factors. target number groups variable      specified catgroups. grouped variables synthesised       numeric variables synthesised method syn.nested      placed position synthetic data original.      grouped variables stored synthetic data. want keep     categorised values change relevant variables data      running syn() function numtocat.syn() catgroups integer vector integers length     numtocat giving target number groups     numeric variables categorised. function group_var     classInt package performs categorisation. models TRUE parameters models fitted original data       used generate synthetic values stored. print.flag TRUE (default) synthesising history       information messages printed console. silent       computation use print.flag = FALSE. seed integer used argument set.seed().      integer provided, default \"sample\" generate one      stored. prevent generating integer set seed      NA. ... additional arguments passed synthesising functions. See       section 'Details' information. strata numeric vector strata identifiers string vector       names stratifying variable(s). minstratumsize minimum size stratum. tab.strataobs logical value indicating whether frequency table      number observations strata original data set       printed. tab.stratasyn logical value indicating whether frequency table      number observations strata synthetic data set(s)       printed. x object class synds; result call syn().","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating synthetic data sets — syn","text":"variables visit.sequence corresponding non-empty   method synthesised. exceptions event indicators.   synthesised along corresponding time event variables  included visit.sequence. variables (  visit.sequence visit.sequence corresponding blank   method) can used predictors. Including visit.sequence   generates default predictor.matrix reflecting order variables   visit.sequence otherwise predictor.matrix   adjusted accordingly. predictors variables  visit.sequence visit.sequence blank method  removed predictor.matrix. Variables synthesised synthesised yet used  predictors. Also variables used passive synthesis restricted  values rules (rules) synthesised variables  apply . Mismatch data type synthesising method stops execution  print error message numeric variables number levels less  minnumlevels changed factors methods changed  automatically, necessary, methods categorical variables.   Methods variables visit sequence changed blank. built-elementary synthesising methods defined conditional   distributions include: ctree, cart classification regression trees (CART),       see syn.cart bagging, random forests, ranger methods using ensembles CART trees,       see syn.bag, syn.rf, syn.ranger survctree classification regression trees (CART)      duration time data (parametric methods survival data       implemented yet),  see syn.survctree norm normal linear regression, see syn.norm normrank normal linear regression preserving marginal       distribution, see syn.normrank lognorm, sqrtnorm, cubertnorm normal linear regression       natural logarithmic, square root cube root transformation       dependent variable respectively, see syn.lognorm logreg logistic regression, see  syn.logreg polyreg unordered polytomous regression, see       syn.polyreg polr ordered polytomous regression, see syn.polr pmm predictive mean matching, see syn.pmm sample random sample observed data,       see syn.sample passive function synthesised data,        see syn.passive nested bootstrap sample within category original       grouping variable, see syn.nested satcat bootstrap sample within category       crosstabulation predictor variables,       see syn.satcat methods use group variables synthesised together.    must always together start visit sequence: catall fit saturated log-linear model,      see syn.catall ipf fit log-linear model, defined margins, iterative     proportional fitting  see syn.ipf functions corresponding methods called syn.method,   method string name synthesising method.   instance function corresponding ctree function called  syn.ctree. new synthesising method can introduced writing   function named syn.newmethod specifying method   parameter syn() function \"newmethod\". order use \"nested\" sampling, method parameter syn   function specified \"nested.varname\", \"varname\"  name grouped (less detailed) variable, one used   nested synthesis. variable synthesised using \"nested\" method   excluded synthesising variables except used \"nested\"   method. Additional parameters can passed synthesising methods part   dots argument. named using period-separated method   parameter name (method.parameter). instance, order set   minbucket (minimum number observations terminal node   CART model) ctree synthesising method, ctree.minbucket  specified. parameters method-specific used   variables synthesised using method. See help   syn.method details allowed parameters   specific method.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating synthetic data sets — syn","text":"summary function (summary.synds) can used     obtain summary synthesised variables. object class synds, stands 'synthesised    data set'. list following components: call original call syn(). m number synthetic versions original (observed) data. syn data frame (m = 1) list m data frames      (m > 1) synthetic data set(s). method vector synthesising methods applied variable      saved synthesised data. visit.sequence vector column indices visiting sequence.      indices refer columns saved synthesised data. predictor.matrix matrix specifying set predictors used      variable saved synthesised data. smoothing vector specifying smoothing methods       applied variable saved synthesised data. event vector integers specifying survival data column       indices corresponding event indicators. indices refer       columns saved synthesised data. denom vector integers specifying variables modelled       using binomial regression column indices corresponding       denominator variables. indices refer columns       saved synthesised data. proper logical value indicating whether proper synthesis      conducted. n number cases original data. k number cases synthesised data. rules list rules restricted values applied synthetic      data. rvalues list values corresponding rules      specified rules. cont.na list codes missing values continuous variables. semicont list values semi-continuous variables       spikes. drop..used logical value indicating whether variables used      synthesis saved synthesised data corresponding      synthesis parameters. drop.pred.logical value indicating whether variables      synthesised used predictors saved synthesised data. models models = TRUE named list estimates models       fitted original data used generate synthetic values       returned $fit component method       (e.g. syn.cart()). list ordered variables position       data, models used predict missing values appended       list. seed integer used set.seed() argument. var.lab vector variable labels data imported SPSS using       read.obs(). val.lab list value labels factors data imported SPSS       using read.obs(). obs.vars vector variable names observed data set. syn.strata() used two additiona components: strata.syn factor variable list factor variables containing       stratum values observation units syn. strata.lab character vector strata labels. Note also syn.strata used values items matrices  row corresponding stratum lists one element per stratum.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generating synthetic data sets — syn","text":"See package vignette additional information.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generating synthetic data sets — syn","text":"Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 .","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating synthetic data sets — syn","text":"","code":"### selection of variables vars <- c(\"sex\",\"age\",\"marital\",\"income\",\"ls\",\"smoke\") ods  <- SD2011[1:1000, vars]   ### default synthesis s1 <- syn(ods) #>  #> Synthesis #> ----------- #>  sex age marital income ls smoke s1 #> Call: #> ($call) syn(data = ods) #>  #> Number of synthesised data sets:  #> ($m)  1  #>  #> First rows of synthesised data set:  #> ($syn) #>      sex age marital income               ls smoke #> 1 FEMALE  17  SINGLE     NA          PLEASED    NO #> 2 FEMALE  26 MARRIED     -8            MIXED    NO #> 3 FEMALE  80 WIDOWED     NA MOSTLY SATISFIED    NO #> 4 FEMALE  47 MARRIED   2000          PLEASED    NO #> 5   MALE  50 MARRIED    300 MOSTLY SATISFIED   YES #> 6 FEMALE  62 MARRIED   1040 MOSTLY SATISFIED    NO #> ... #>  #> Synthesising methods:  #> ($method) #>      sex      age  marital   income       ls    smoke  #> \"sample\"   \"cart\"   \"cart\"   \"cart\"   \"cart\"   \"cart\"  #>  #> Order of synthesis:  #> ($visit.sequence) #>     sex     age marital  income      ls   smoke  #>       1       2       3       4       5       6  #>  #> Matrix of predictors:  #> ($predictor.matrix) #>         sex age marital income ls smoke #> sex       0   0       0      0  0     0 #> age       1   0       0      0  0     0 #> marital   1   1       0      0  0     0 #> income    1   1       1      0  0     0 #> ls        1   1       1      1  0     0 #> smoke     1   1       1      1  1     0    ### synthesis with default parametric methods s2 <- syn(ods, method = \"parametric\", seed = 123) #>  #> Synthesis #> ----------- #>  sex age marital income ls smoke s2$method #>        sex        age    marital     income         ls      smoke  #>   \"sample\" \"normrank\"  \"polyreg\" \"normrank\"  \"polyreg\"  \"polyreg\"     ### multiple synthesis of selected variables with customised methods s3 <- syn(ods, visit.sequence = c(2, 1, 4, 5), m = 2,           method = c(\"logreg\",\"sample\",\"\",\"normrank\",\"ctree\",\"\"),           ctree.minbucket = 10) #>  #> Variable(s): marital, smoke not synthesised or used in prediction. #> CAUTION: The synthesised data will contain the variable(s) unchanged. #>  #>  #> Synthesis number 1 #> -------------------- #>  age sex income ls #>  #> Synthesis number 2 #> -------------------- #>  age sex income ls summary(s3) #> Synthetic object with 2 syntheses using methods: #>        sex        age    marital     income         ls      smoke  #>   \"logreg\"   \"sample\"         \"\" \"normrank\"    \"ctree\"         \"\"  #>  #> Summary (average) for all synthetic data sets: #>      sex           age                      marital        income        #>  MALE  :410   Min.   :16.00   SINGLE            :265   Min.   :   -8.0   #>  FEMALE:590   1st Qu.:30.00   MARRIED           :581   1st Qu.:  700.0   #>               Median :47.00   WIDOWED           :103   Median : 1195.0   #>               Mean   :46.86   DIVORCED          : 41   Mean   : 1400.5   #>               3rd Qu.:61.50   LEGALLY SEPARATED :  2   3rd Qu.: 1800.0   #>               Max.   :92.00   DE FACTO SEPARATED:  5   Max.   :15000.0   #>                               NA's              :  3   NA's   :  135.5   #>                    ls         smoke     #>  DELIGHTED          : 38.5   YES :253   #>  PLEASED            :368.5   NO  :745   #>  MOSTLY SATISFIED   :329.0   NA's:  2   #>  MIXED              :187.5              #>  MOSTLY DISSATISFIED: 57.5              #>  UNHAPPY            : 10.0              #>  TERRIBLE           :  9.0              summary(s3, msel = 1:2) #> Synthetic object with 2 syntheses using methods: #>        sex        age    marital     income         ls      smoke  #>   \"logreg\"   \"sample\"         \"\" \"normrank\"    \"ctree\"         \"\"  #>  #> Summary for synthetic data set 1: #>      sex           age                      marital        income      #>  MALE  :429   Min.   :16.00   SINGLE            :265   Min.   :   -8   #>  FEMALE:571   1st Qu.:30.00   MARRIED           :581   1st Qu.:  700   #>               Median :46.00   WIDOWED           :103   Median : 1168   #>               Mean   :46.29   DIVORCED          : 41   Mean   : 1391   #>               3rd Qu.:61.00   LEGALLY SEPARATED :  2   3rd Qu.: 1800   #>               Max.   :92.00   DE FACTO SEPARATED:  5   Max.   :15000   #>                               NA's              :  3   NA's   :136     #>                    ls       smoke     #>  DELIGHTED          : 40   YES :253   #>  PLEASED            :364   NO  :745   #>  MOSTLY SATISFIED   :325   NA's:  2   #>  MIXED              :198              #>  MOSTLY DISSATISFIED: 58              #>  UNHAPPY            :  5              #>  TERRIBLE           : 10              #>  #> Summary for synthetic data set 2: #>      sex           age                      marital        income      #>  MALE  :391   Min.   :16.00   SINGLE            :265   Min.   :   -8   #>  FEMALE:609   1st Qu.:30.00   MARRIED           :581   1st Qu.:  700   #>               Median :48.00   WIDOWED           :103   Median : 1222   #>               Mean   :47.42   DIVORCED          : 41   Mean   : 1410   #>               3rd Qu.:62.00   LEGALLY SEPARATED :  2   3rd Qu.: 1800   #>               Max.   :92.00   DE FACTO SEPARATED:  5   Max.   :15000   #>                               NA's              :  3   NA's   :135     #>                    ls       smoke     #>  DELIGHTED          : 37   YES :253   #>  PLEASED            :373   NO  :745   #>  MOSTLY SATISFIED   :333   NA's:  2   #>  MIXED              :177              #>  MOSTLY DISSATISFIED: 57              #>  UNHAPPY            : 15              #>  TERRIBLE           :  8                 ### adjustment to the default predictor matrix  s4.ini <- syn(data = ods, visit.sequence = c(1, 2, 5, 3),               m = 0, drop.not.used = FALSE) #>  #> Variable(s): income, smoke not synthesised or used in prediction. #> CAUTION: The synthesised data will contain the variable(s) unchanged. #>  pM.cor <- s4.ini$predictor.matrix pM.cor[\"marital\",\"ls\"] <- 0 s4 <- syn(data = ods, visit.sequence = c(1, 2, 5, 3),           predictor.matrix = pM.cor) #>  #> Variable(s): income, smoke not synthesised or used in prediction. #> CAUTION: The synthesised data will contain the variable(s) unchanged. #>  #>  #> Synthesis #> ----------- #>  sex age ls marital    ### handling missing values in continuous variables s5 <- syn(ods, cont.na = list(income = c(NA, -8))) #>  #> Synthesis #> ----------- #>  sex age marital income ls smoke    ### rules for restricted values - marital status of males under 18 should be 'single' s6 <- syn(ods, rules = list(marital = \"age < 18 & sex == 'MALE'\"),           rvalues = list(marital = 'SINGLE'), method = \"parametric\", seed = 123) #>  #> Synthesis #> ----------- #>  sex age marital income ls smoke with(s6$syn, table(marital[age < 18 & sex == 'MALE'])) #>  #>             SINGLE            MARRIED            WIDOWED           DIVORCED  #>                 11                  0                  0                  0  #>  LEGALLY SEPARATED DE FACTO SEPARATED  #>                  0                  0  ### results for default parametric synthesis without the rule   with(s2$syn, table(marital[age < 18 & sex == 'MALE'])) #>  #>             SINGLE            MARRIED            WIDOWED           DIVORCED  #>                 10                  1                  0                  0  #>  LEGALLY SEPARATED DE FACTO SEPARATED  #>                  0                  0   ### synthesis with ipf for all variables s7 <- syn(ods[, 1:3], method = \"ipf\", numtocat = \"age\") #> ************************************************************** #>  The numeric variable(s): age #>  will been synthesised as grouped variables and their numeric #>  values generated from boostrap samples within categories. #> ************************************************************** #>  #> Synthesis #> ----------- #> All 3 variables in the data synthesised together by method 'ipf' #>  #> ['ipf' converged in 19 iterations] #>   ### alternatively group the numeric variable before synthesis to save ### the grouped data rather than the numeric in the synthetic data set ods.cat <- numtocat.syn(ods, numtocat = \"age\", catgroups = 10)$data #> Variable(s) age grouped into categories. s8 <- syn(ods.cat[, 1:3], method = \"ipf\") #>  #> Synthesis #> ----------- #> All 3 variables in the data synthesised together by method 'ipf' #>  #> ['ipf' converged in 19 iterations] #>   ### stratified synthesis s9 <- syn.strata(ods, strata = \"sex\") #> Number of observations in strata (original data): #>   MALE FEMALE  #>    448    552  #>  #> m = 1, strata = MALE #> ----------------------------------------------------- #> Sample(s) of size 436 will be generated from original data of size 448. #>  #> Variable sex has only one value so its method has been changed to \"constant\". #> Variable sex removed as predictor because only one value. #>  #> Method \"cart\" is not valid for a variable without predictors (age) #> Method has been changed to \"sample\" #>  #>  #> Synthesis #> ----------- #>  sex age marital income ls smoke #>  #> m = 1, strata = FEMALE #> ----------------------------------------------------- #> Sample(s) of size 564 will be generated from original data of size 552. #>  #> Variable sex has only one value so its method has been changed to \"constant\". #> Variable sex removed as predictor because only one value. #>  #> Method \"cart\" is not valid for a variable without predictors (age) #> Method has been changed to \"sample\" #>  #>  #> Synthesis #> ----------- #>  sex age marital income ls smoke"},{"path":"https://florianm.github.io/synthpop/reference/syn.ipf.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","title":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","text":"fit table obtained log-linear fit matches    numbers margins specified margin parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ipf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","text":"","code":"syn.ipf(x, k, proper = FALSE, priorn = 1, structzero = NULL,          gmargins = \"twoway\", othmargins = NULL, tol = 1e-3,         max.its = 5000, maxtable = 1e8, print.its = FALSE,         epsilon = 0, rand = TRUE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.ipf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","text":"x data frame set original data synthesised. k number rows synthetic data set - defaults n. proper proper = TRUE x replaced bootstrap      sample synthesis, thus effectively sampling posterior      distribution model, given data. priorn sum parameters Dirichlet prior can      thought pseudo-count giving number observations inform      prior knowledge parameters. structzero named list lists defines cells table      structural zeros remain zeros synthetic data,      leaving prior zeros. element structzero list      list describes set cells table defined combination      two variables name element must consist      variable names seperated underscore, e.g. sex_edu.      length element determined number variables      component gives variable levels (numeric labels) define      structural zero cells (see example ). gmargins single character define group margins. present      \"oneway\" \"twoway\" option creates, respectively, 1-way      2-way margins table. othmargins list margins fitted. gmargins     NULL othmargins added . tol stopping criterion Ipfp. max.maximum umber iterations allowed Ipfp. maxtable number cells cross-tabulation      variables trigger severe warning. print.true iterations Ipfp      printed console. Otherwise message whether      iterations converged given end fitting. epsilon epsilon value overall differential privacy (DP) parameter.     implemented dividing privacy budget equally      margins used fit data. rand epsilon > 0 DP synthetic data created      determines whether data created Poisson counts expected      fitted counts cells DP adjusted data. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ipf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","text":"used syn function group variables  method = \"ipf\" must together start visit sequence.  function designed categorical variables, can also used  numerical variables categorised specifying  numtocat parameter main function syn. Subsequent variables  visit.sequence synthesised conditional synthesised  values grouped variables. fit table obtained  log-linear fit matches numbers margins specified margin  parameters. Prior probabilities proportions cell table  given Dirichlet distribution parameter every cell  table structural zero. sum parameters  priorn. default priorn = 1 can thought equivalent  knowledge 1 observation equally likely fall cell table. synthetic data generated multinomial distribution parameters given expected posterior probabilities  cell table. maximum likelihood estimate log-linear  fit cell \\(c_i\\) \\(p_i\\) table \\(N\\) cells structural zeros expectation posterior probability cell \\((p_i + priorn/N^2) / (1 + priorn / N^2)\\) equivalently \\((N * p_i + priorn/N) / (N + priorn / N)\\). Unlike syn.satcat, fits saturated models conditional  distrinutions, x can include combination variables, including  present original data, except defined structzero. NOTE function called setting elements method syn \"ipf\", parameters priorn, structzero, gmargins, othmargins, tol,  max., maxtable, print., epsilon,  rand must supplied syn e.g. ipf.priorn.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ipf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","text":"list two components: res data frame k rows containing synthesised data. fit list made two lists: margins fitted original      data margin.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ipf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesis of a group of categorical variables by iterative \n  proportional fitting — syn.ipf","text":"","code":"ods <- SD2011[, c(1, 4, 5, 6, 2, 10, 11)] table(ods[, c(\"placesize\", \"region\")]) #>                         region #> placesize                Dolnoslaskie Kujawsko-pomorskie Lodzkie Lubelskie #>   URBAN 500,000 AND OVER           60                  0      94         0 #>   URBAN 200,000-500,000            30                 15       0         0 #>   URBAN 100,000-200,000            64                 28      66        41 #>   URBAN 20,000-100,000              0                 69       0        46 #>   URBAN BELOW 20,000               57                 45      31        28 #>   RURAL AREAS                     108                156     167       186 #>                         region #> placesize                Lubuskie Malopolskie Mazowieckie Opolskie Podkarpackie #>   URBAN 500,000 AND OVER        0          64         126        0            0 #>   URBAN 200,000-500,000        33          10          10       19           17 #>   URBAN 100,000-200,000        13          40          78       37           47 #>   URBAN 20,000-100,000          0           0          23        0            0 #>   URBAN BELOW 20,000           42          37          72       24           37 #>   RURAL AREAS                  65         220         261       73          212 #>                         region #> placesize                Podlaskie Pomorskie Slaskie Swietokrzyskie #>   URBAN 500,000 AND OVER         0         0       0              0 #>   URBAN 200,000-500,000          0         0     120              0 #>   URBAN 100,000-200,000         31        64     121             38 #>   URBAN 20,000-100,000          45        76      71             35 #>   URBAN BELOW 20,000            25        35      28             30 #>   RURAL AREAS                   92       131     160            127 #>                         region #> placesize                Warminsko-mazurskie Wielkopolskie Zachodnio-pomorskie #>   URBAN 500,000 AND OVER                   0            48                   0 #>   URBAN 200,000-500,000                   42            10                  21 #>   URBAN 100,000-200,000                   43            88                  44 #>   URBAN 20,000-100,000                     0             0                  42 #>   URBAN BELOW 20,000                      45            53                  53 #>   RURAL AREAS                            129           214                  88  # Each `placesize_region` sublist:  # for each relevant level of `placesize` defined in the first element,  # the second element defines regions (variable `region`) that do not  # have places of that size.  struct.zero <- list(   placesize_region = list(placesize = \"URBAN 500,000 AND OVER\",                            region = c(2, 4, 5, 8:13, 16)),   placesize_region = list(placesize = \"URBAN 200,000-500,000\",                            region = c(3, 4, 10:11, 13)),   placesize_region = list(placesize = \"URBAN 20,000-100,000\",                            region = c(1, 3, 5, 6, 8, 9, 14:15)))  synipf <- syn(ods, method = c(rep(\"ipf\", 4), \"ctree\", \"normrank\", \"ctree\"),                ipf.gmargins = \"twoway\", ipf.othmargins = list(c(1, 2, 3)),               ipf.priorn = 2, ipf.structzero = struct.zero) #>  #> Synthesis #> ----------- #> First 4 variables (sex, placesize, region, edu) synthesised together by method 'ipf' #> Error in sampler.syn(p, data, m, syn, visit.sequence, rules, rvalues,     event, proper, print.flag, k, pred.not.syn, models, numtocat,     ...): object 'struct.zero' not found"},{"path":"https://florianm.github.io/synthpop/reference/syn.lognorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by linear regression after transformation of \n       a dependent variable — syn.lognorm, syn.sqrtnorm, syn.cubertnorm","title":"Synthesis by linear regression after transformation of \n       a dependent variable — syn.lognorm, syn.sqrtnorm, syn.cubertnorm","text":"Generates univariate synthetic data using linear regression   outcome variable transformed natural logarithm (lognorm),    square root (sqrtnorm) cube root (cubertnorm).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.lognorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by linear regression after transformation of \n       a dependent variable — syn.lognorm, syn.sqrtnorm, syn.cubertnorm","text":"","code":"syn.lognorm(y, x, xp, proper = FALSE, ...)  syn.sqrtnorm(y, x, xp, proper = FALSE, ...) syn.cubertnorm(y, x, xp, proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.lognorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by linear regression after transformation of \n       a dependent variable — syn.lognorm, syn.sqrtnorm, syn.cubertnorm","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. proper logical value specifying whether proper synthesis      conducted. See details. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.lognorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by linear regression after transformation of \n       a dependent variable — syn.lognorm, syn.sqrtnorm, syn.cubertnorm","text":"Generates synthetic values using spread around   fitted linear regression line transformed y given x.   proper synthesis first regression coefficients drawn   normal distribution mean variance fitted model.   synthetic values transformed back original scale.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.lognorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by linear regression after transformation of \n       a dependent variable — syn.lognorm, syn.sqrtnorm, syn.cubertnorm","text":"list two components: res vector length k synthetic values y. fit data frame regression coefficients error estimates.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.logreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by logistic regression — syn.logreg","title":"Synthesis by logistic regression — syn.logreg","text":"Generates univariate synthetic data binary binomial    response variable using logistic regression model.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.logreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by logistic regression — syn.logreg","text":"","code":"syn.logreg(y, x, xp, denom = NULL, denomp = NULL, proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.logreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by logistic regression — syn.logreg","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. denom original denominator vector length n binomial      regression model. denomp synthesised denominator vector length k      binomial regression model. proper logical value specifying whether proper synthesis      conducted. See details. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.logreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by logistic regression — syn.logreg","text":"Synthesis binary response variables non-Bayesian    approximate Bayesian logistic regression model. non-Bayesian    method consists following steps: Calculate predicted inverse logits synthesied covariates. Compare inverse logits random (0,1) deviate get synthetic      values. Bayesian version (proper synthesis) includes additional step    computing inverse logits, namely drawing coefficients normal distribution    mean variance estimated step 1. method relies standard glm.fit function.   Warnings glm.fit suppressed. Perfect prediction   handled data augmentation method.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.logreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by logistic regression — syn.logreg","text":"list two components: res vector length k synthetic values y. fit summary model fitted observed data used       produce synthetic values.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis for a variable nested within another variable. — syn.nested","title":"Synthesis for a variable nested within another variable. — syn.nested","text":"Synthesizes one variable (y) another one (x)    y nested categories x. bootstrap    sample created original values y within category    xp (synthesised values grouping variable).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis for a variable nested within another variable. — syn.nested","text":"","code":"syn.nested(y, x, xp, smoothing = \"\", cont.na = NA,  ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis for a variable nested within another variable. — syn.nested","text":"y original data vector length n nested variable. x original data vector length n variable within      y nested. xp vector length k synthetic values x. smoothing smoothing method. See syn.smooth. cont.na y numeric can list vector giving values      y indicate missing values. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.nested.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis for a variable nested within another variable. — syn.nested","text":"example x classification    occupations y detailed sub-classification.    intended x categorical (factor) variable.   warning issued original y nested within x.   variable synthesised syn.nested() automatically excluded   predicting later variables provide extra information,   given grouping variable.   syn.nested() also used final synthesis variables    syn() option numtocat used synthesise numerical    variables groups.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis for a variable nested within another variable. — syn.nested","text":"list two components: res vector length k synthetic values y. fit name method used synthesis (\"nested\").","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by linear regression — syn.norm","title":"Synthesis by linear regression — syn.norm","text":"Generates univariate synthetic data using linear regression   analysis.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by linear regression — syn.norm","text":"","code":"syn.norm(y, x, xp, proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by linear regression — syn.norm","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. proper logical value specifying whether proper synthesis      conducted. See details. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by linear regression — syn.norm","text":"Generates synthetic values using spread around   fitted linear regression line y given x.   proper synthesis first regression coefficients    drawn normal distribution mean variance   fitted model.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by linear regression — syn.norm","text":"list two components: res vector length k synthetic values y. fit data frame regression coefficients error estimates.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.normrank.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by normal linear regression preserving\n  the marginal distribution — syn.normrank","title":"Synthesis by normal linear regression preserving\n  the marginal distribution — syn.normrank","text":"Generates univariate synthetic data using linear regression analysis   preserves marginal distribution. Regression carried   Normal deviates ranks original variable. Synthetic values    assigned original values based synthesised ranks    transformed synthesised Normal deviates.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.normrank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by normal linear regression preserving\n  the marginal distribution — syn.normrank","text":"","code":"syn.normrank(y, x, xp, smoothing = \"\", proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.normrank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by normal linear regression preserving\n  the marginal distribution — syn.normrank","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. smoothing smoothing method. See syn.smooth. proper logical value specifying whether proper synthesis      conducted. See details. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.normrank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by normal linear regression preserving\n  the marginal distribution — syn.normrank","text":"First generates synthetic values Normal deviates ranks     values y using spread around fitted    linear regression line Normal deviates ranks given x.    synthetic Normal deviates ranks transformed back    get synthetic ranks used assign values   y.    proper synthesis first regression coefficients    drawn normal distribution mean variance   fitted model.   smoothing methods can applied setting smoothing parameter (see    syn.smooth). recommended tool decrease    disclosure risk.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.normrank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by normal linear regression preserving\n  the marginal distribution — syn.normrank","text":"list two components: res vector length k synthetic values y. fit data frame regression coefficients error estimates.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":null,"dir":"Reference","previous_headings":"","what":"Passive synthesis — syn.passive","title":"Passive synthesis — syn.passive","text":"Derives new variable according specified    function synthesised data.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Passive synthesis — syn.passive","text":"","code":"syn.passive(data, func)"},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Passive synthesis — syn.passive","text":"data data frame synthesised data. func formula specifying transformations data.      specified string starting ~.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Passive synthesis — syn.passive","text":"function synthesised data can specified. Note several operators    +, -, * ^ different meanings formula syntax.    Use identity function () interpreted arithmetic operators,    e.g. \"~(age^2)\".   Function syn() checks whether passive assignment correct original data    fails warning true. variables synthesised passively can   used predict later variables synthesis except numeric variables    missing data. warning produced last case.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Passive synthesis — syn.passive","text":"list two components: res vector length k including result applying      formula. fit name method used synthesis (\"passive\").","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Passive synthesis — syn.passive","text":"Van Buuren, S. Groothuis-Oudshoorn, K. (2011).   mice: Multivariate Imputation Chained Equations   R. Journal Statistical Software,   45(3), 1-67. doi:10.18637/jss.v045.i03","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Passive synthesis — syn.passive","text":"Gillian Raab, 2021 based Stef van Buuren, Karin Groothuis-Oudshoorn, 2000","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.passive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Passive synthesis — syn.passive","text":"","code":"### the examples shows how inconsistencies in the SD2011 data are picked up  ### by syn.passive() ods <- SD2011[, c(\"height\", \"weight\", \"bmi\", \"age\", \"agegr\")] ods$hsq <- ods$height^2 ods$sex <- SD2011$sex meth <- c(\"cart\", \"cart\", \"~I(weight / height^2 * 10000)\",             \"cart\", \"~I(cut(age, c(15, 24, 34, 44, 59, 64, 120)))\",            \"~I(height^2)\", \"logreg\")  if (FALSE) { ### fails for bmi  s1 <- syn(ods, method = meth, seed = 6756, models = TRUE)  ### fails for agegr ods$bmi <- ods$weight / ods$height^2 * 10000   s2 <- syn(ods, method = meth, seed = 6756, models = TRUE)   ### fails because of wrong order  ods$agegr <- cut(ods$age, c(15, 24, 34, 44, 59, 64, 120)) s3 <- syn(ods, method = meth, visit.sequence = 7:1,            seed = 6756, models = TRUE)   }  ### runs without errors ods$bmi   <- ods$weight / ods$height^2 * 10000   ods$agegr <- cut(ods$age, c(15, 24, 34, 44, 59, 64, 120)) s4 <- syn(ods, method = meth, seed = 6756, models = TRUE)  #>  #> Variable bmi with passive synthesis has missing values #> so it will not be used to predict other variables. #>  #> Variable hsq with passive synthesis has missing values #> so it will not be used to predict other variables. #>  #> Method \"cart\" is not valid for a variable without predictors (height) #> Method has been changed to \"sample\" #>  #>  #> Synthesis #> ----------- #>  height weight bmi age agegr hsq sex ### bmi and hsq do not predict sex because of missing values s4$models$sex  #>  #> Call: #> NULL #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|)     #>               0.428892   0.042636  10.059  < 2e-16 *** #> age          -0.024160   0.010212  -2.366 0.017991 *   #> height.0     -0.269075   0.008603 -31.276  < 2e-16 *** #> weight.0     -0.044899   0.003669 -12.237  < 2e-16 *** #> agegr.1       0.495299   0.188263   2.631 0.008516 **  #> agegr.2       0.758444   0.251910   3.011 0.002606 **  #> agegr.3       0.371103   0.360359   1.030 0.303097     #> agegr.4       0.305319   0.460557   0.663 0.507372     #> agegr.5       0.415576   0.568737   0.731 0.464963     #> height.NA.1 -46.366887   1.674739 -27.686  < 2e-16 *** #> weight.NA.1  -2.718794   0.763433  -3.561 0.000369 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 6865.8  on 5039  degrees of freedom #> Residual deviance: 3592.1  on 5029  degrees of freedom #> AIC: 3596.8 #>  #> Number of Fisher Scoring iterations: 6 #>   ### hsq with no missing values used to predict sex   ods2 <- ods[!is.na(ods$height),] s5 <- syn(ods2, method = meth, seed = 6756, models = TRUE)  #>  #> Variable bmi with passive synthesis has missing values #> so it will not be used to predict other variables. #>  #> Method \"cart\" is not valid for a variable without predictors (height) #> Method has been changed to \"sample\" #>  #>  #> Synthesis #> ----------- #>  height weight bmi age agegr hsq sex s5$models$sex #>  #> Call: #> NULL #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|)     #>              0.1524028  0.0468528   3.253  0.00114 **  #> height       1.5071387  0.1231117  12.242  < 2e-16 *** #> age         -0.0258619  0.0101953  -2.537  0.01119 *   #> hsq         -0.0052908  0.0003767 -14.044  < 2e-16 *** #> weight.0    -0.0434550  0.0036847 -11.793  < 2e-16 *** #> agegr.1      0.4968707  0.1963467   2.531  0.01139 *   #> agegr.2      0.7103598  0.2565054   2.769  0.00562 **  #> agegr.3      0.3307380  0.3631623   0.911  0.36244     #> agegr.4      0.3029624  0.4621868   0.655  0.51215     #> agegr.5      0.4038381  0.5707149   0.708  0.47919     #> weight.NA.1 -2.4363326  0.8099956  -3.008  0.00263 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 6815.9  on 5004  degrees of freedom #> Residual deviance: 3463.6  on 4994  degrees of freedom #> AIC: 3456.6 #>  #> Number of Fisher Scoring iterations: 6 #>   ### agegr with missing values used to predict sex because not numeric ods3 <- ods ods3$age[1:4] <- NA ods3$agegr <- cut(ods3$age, c(15, 24, 34, 44, 59, 64, 120)) s6 <- syn(ods3, method = meth, seed = 6756, models = TRUE)  #>  #> Variable bmi with passive synthesis has missing values #> so it will not be used to predict other variables. #>  #> Variable hsq with passive synthesis has missing values #> so it will not be used to predict other variables. #>  #> Method \"cart\" is not valid for a variable without predictors (height) #> Method has been changed to \"sample\" #>  #>  #> Synthesis #> ----------- #>  height weight bmi age agegr hsq sex s6$models$sex   #>  #> Call: #> NULL #>  #> Coefficients: #>               Estimate Std. Error z value Pr(>|z|)     #>               0.429533   0.042657  10.069  < 2e-16 *** #> height.0     -0.269177   0.008604 -31.285  < 2e-16 *** #> weight.0     -0.044978   0.003671 -12.254  < 2e-16 *** #> age.0        -0.024540   0.010217  -2.402 0.016309 *   #> agegr.1       0.499779   0.188350   2.653 0.007967 **  #> agegr.2       0.766891   0.252030   3.043 0.002343 **  #> agegr.3       0.379872   0.360472   1.054 0.291966     #> agegr.4       0.322277   0.460761   0.699 0.484274     #> agegr.5       0.435642   0.568974   0.766 0.443878     #> agegr.6       2.010719   2.251562   0.893 0.371840     #> height.NA.1 -46.384462   1.674914 -27.694  < 2e-16 *** #> weight.NA.1  -2.722389   0.763576  -3.565 0.000363 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for binomial family taken to be 1) #>  #>     Null deviance: 6867.2  on 5043  degrees of freedom #> Residual deviance: 3591.2  on 5032  degrees of freedom #> AIC: 3596.5 #>  #> Number of Fisher Scoring iterations: 6 #>"},{"path":"https://florianm.github.io/synthpop/reference/syn.pmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by predictive mean matching — syn.pmm","title":"Synthesis by predictive mean matching — syn.pmm","text":"Generates univariate synthetic data using predictive mean   matching.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.pmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by predictive mean matching — syn.pmm","text":"","code":"syn.pmm(y, x, xp, smoothing = \"\", proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.pmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by predictive mean matching — syn.pmm","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. proper logical value specifying whether proper synthesis      conducted. See details. smoothing smoothing method. See documentation      syn.smooth. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.pmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by predictive mean matching — syn.pmm","text":"Synthesis y predictive mean matching. procedure   follows: Fit linear regression    original data. Compute predicted values y.hat   ysyn.hat original x synthesised    xp covariates respectively. predicted value ysyn.hat find donor    observations closest predicted values y.hat    (ties broken random selection), randomly sample one    take observed value y synthetic value. Bayesian version (proper synthesis) includes additional    step computing predicted values: Draw coefficients    normal distribution mean variance estimated step 1 use    calculate predicted values synthesised covariates.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.pmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by predictive mean matching — syn.pmm","text":"list two components: res vector length k synthetic values y. fit data frame regression coefficients error estimates.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.polr.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by ordered polytomous regression — syn.polr","title":"Synthesis by ordered polytomous regression — syn.polr","text":"Generates synthetic categorical variable using   ordered polytomous regression (without bootstrap).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by ordered polytomous regression — syn.polr","text":"","code":"syn.polr(y, x, xp, proper = FALSE, maxit = 1000, trace = FALSE,    MaxNWts = 10000, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.polr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by ordered polytomous regression — syn.polr","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. proper proper synthesis (proper = TRUE)      model fitted bootstrapped sample original data. maxit maximum number iterations nnet. trace switch tracing optimization nnet. MaxNWts maximum allowable number weights nnet. ... additional parameters passed optim      nnet.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by ordered polytomous regression — syn.polr","text":"Generates synthetic ordered categorical variables   proportional odds logistic regression (polr) model.   function repeatedly applies logistic regression   successive splits. model also known   cumulative link model. algorithm syn.polr uses   function polr MASS package. order avoid bias due perfect prediction,   data augmented method White, Daniel Royston (2010). case call polr fails,    usually data sparse,    multinom function used instead.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by ordered polytomous regression — syn.polr","text":"list two components: res vector length k synthetic values y. fit summary model fitted observed data used     produce synthetic values.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesis by ordered polytomous regression — syn.polr","text":"White, .R., Daniel, R. Royston, P. (2010). Avoiding bias   due perfect prediction multiple imputation   incomplete categorical variables. Computational   Statistics Data Analysis, 54, 2267--2275.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.polyreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by unordered polytomous regression — syn.polyreg","title":"Synthesis by unordered polytomous regression — syn.polyreg","text":"Generates synthetic categorical variable using   unordered polytomous regression (without bootstrap).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polyreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by unordered polytomous regression — syn.polyreg","text":"","code":"syn.polyreg(y, x, xp, proper = FALSE, maxit = 1000, trace = FALSE,              MaxNWts = 10000, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.polyreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by unordered polytomous regression — syn.polyreg","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. proper proper synthesis (proper = TRUE)      multinomial model fitted bootstrapped sample original data. maxit maximum number iterations nnet. trace switch tracing optimization nnet. MaxNWts maximum allowable number weights nnet. ... additional parameters passed nnet.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polyreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by unordered polytomous regression — syn.polyreg","text":"Generates synthetic categorical variables polytomous    regression model. method consists following steps: Fit categorical response multinomial model. Compute predicted categories. Add appropriate   noise predictions. algorithm syn.polyreg uses function    multinom nnet package. numerical    variables scaled cover range (0,1) fitting. Warnings    printed algorithm fails converge maxit iterations   also synthesised data one category. latter may occur    variable synthesised sparse algorithm fails    iterate. order avoid bias due perfect prediction,   data augmented method White, Daniel Royston (2010). NOTE function called setting elements method syn()   \"polyreg\", parameters maxit, trace MaxNWts   can supplied syn() e.g. polyreg.maxit.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polyreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by unordered polytomous regression — syn.polyreg","text":"list two components: res vector length k synthetic values y. fit summary model fitted observed data used     produce synthetic values.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.polyreg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesis by unordered polytomous regression — syn.polyreg","text":"White, .R., Daniel, R. Royston, P. (2010). Avoiding bias   due perfect prediction multiple imputation   incomplete categorical variables. Computational   Statistics Data Analysis, 54, 2267--2275.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.ranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis with a fast implementation of random forests — syn.ranger","title":"Synthesis with a fast implementation of random forests — syn.ranger","text":"Generates univariate synthetic data using fast implementation  random forests. uses ranger function  ranger package.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis with a fast implementation of random forests — syn.ranger","text":"","code":"syn.ranger(y, x, xp, smoothing = \"\", proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.ranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis with a fast implementation of random forests — syn.ranger","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. smoothing smoothing method numeric variable. See      syn.smooth. proper proper synthesis (proper = TRUE) model fitted      bootstrapped sample original data. ... additional parameters passed      ranger.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ranger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis with a fast implementation of random forests — syn.ranger","text":"...","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis with a fast implementation of random forests — syn.ranger","text":"list two components: res vector length k synthetic values y. fit model fitted observed data used produce      synthetic values.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.ranger.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesis with a fast implementation of random forests — syn.ranger","text":"...","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.rf.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis with random forest — syn.rf","title":"Synthesis with random forest — syn.rf","text":"Generates univariate synthetic data using Breiman's random forest algorithm  classification regression. uses randomForest function  randomForest package.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis with random forest — syn.rf","text":"","code":"syn.rf(y, x, xp, smoothing = \"\", proper = FALSE, ntree = 10, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.rf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis with random forest — syn.rf","text":"y original data vector length n. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. smoothing smoothing method numeric variable. See      syn.smooth. proper proper synthesis (proper = TRUE) model fitted      bootstrapped sample original data. ntree number trees grow. ... additional parameters passed      randomForest.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.rf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis with random forest — syn.rf","text":"...","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.rf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis with random forest — syn.rf","text":"list two components: res vector length k synthetic values y. fit fitted model object class randomForest.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.rf.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesis with random forest — syn.rf","text":"...","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis by simple random sampling — syn.sample","title":"Synthesis by simple random sampling — syn.sample","text":"Generates random sample observed data.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis by simple random sampling — syn.sample","text":"","code":"syn.sample(y, xp, smoothing = \"\", cont.na = NA, proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis by simple random sampling — syn.sample","text":"y original data vector length n. xp target length k synthetic data vector. smoothing smoothing method numeric variable. See documentation    syn.smooth. cont.na vector codes missing values continuous      variables excluded smoothing. proper proper = TRUE values sampled       bootstrapped sample original data. ... additional parameters passed sample.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.sample.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis by simple random sampling — syn.sample","text":"simple random sample replacement taken   observed values y used synthetic values.   Guassian kernel smoothing can applied continuous variables   setting smoothing parameter \"density\". recommended   tool decrease disclosure risk.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis by simple random sampling — syn.sample","text":"list two components: res vector length k synthetic values y. fit name method used synthesis (\"sample\").","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.satcat.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","title":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","text":"Synthesises one variable (y) possible    combinations precitors (x). bootstrap sample created    original values y within unique combinations    xp (syntheisied values grouping variable).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.satcat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","text":"","code":"syn.satcat(y, x, xp, proper = FALSE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.satcat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","text":"y original data vector length n satcat variable. x matrix (n x p) original predictor variables     y. xp matrix (k x p) synthetic values x. proper proper = TRUE x y replaced      bootstrap sample synthesis, thus effectively sampling      posterior distribution model, given data. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.satcat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","text":"intended variables x categorical (factor)  variables. y also categorical variable syn.satcat  give results fitting saturated polychotomous regression model  usually much faster. syn.satcat fail error message  previous syntheses generated combination variables xp  present x. Use syn.catall method  grouped variables can overcome .","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.satcat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","text":"list two components: res data frame dimension k x p containing synthesised data. fit cross-tabulation original predictor variables.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.satcat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesis from a saturated model based on all combinations of the \n  predictor variables. — syn.satcat","text":"","code":"ods <- SD2011[, c(\"region\", \"sex\", \"agegr\", \"placesize\")]  s1 <- syn(ods, method = c(\"sample\", \"cart\", \"satcat\", \"cart\")) #>  #> Synthesis #> ----------- #>  region sex agegr placesize  if (FALSE) { ### mostly fails because too many small categories s2 <- syn(ods, method = c(\"sample\", \"cart\", \"cart\", \"satcat\"))}"},{"path":"https://florianm.github.io/synthpop/reference/syn.smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"syn.smooth — syn.smooth","title":"syn.smooth — syn.smooth","text":"Implements three different smoothing methods numeric data.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"syn.smooth — syn.smooth","text":"","code":"syn.smooth(ysyn, yobs = NULL, smoothing = \"spline\", window = 5, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"syn.smooth — syn.smooth","text":"ysyn non-missing synthetic data smoothed. yobs original data used methodds determine number      decimal places method \"density\" identify      top-coding. smoothing character vector can take values \"spline\",      \"density\", \"rmean\". window width window running mean. ... additional parameters.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"syn.smooth — syn.smooth","text":"Smooths numeric variables three methods. Default \"spline\"    uses smoothing spline, others \"density\" uses Gaussian   kernel density estimator bandwidth selected using Sheather-Jones   'solve--equation' method (see bw.SJ) \"rmean\"   smooths running mean width \"window\" (see   runningmean).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"syn.smooth — syn.smooth","text":"vector smoothed values ysyn.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.survctree.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","title":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","text":"Generates synthetic event indicator time event data using    classification regression trees (without bootstrap).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.survctree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","text":"","code":"syn.survctree(y, yevent, x, xp, proper = FALSE, minbucket = 5, ...)"},{"path":"https://florianm.github.io/synthpop/reference/syn.survctree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","text":"y vector length n original time data. yevent vector length n original event indicator data. x matrix (n x p) original covariates. xp matrix (k x p) synthesised covariates. proper proper synthesis (proper = TRUE) CART      model fitted bootstrapped sample original data. minbucket minimum number observations     terminal node. See ctree_control     details. ... additional parameters passed ctree.","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.survctree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","text":"procedure synthesis CART model follows: xp find terminal node. Randomly    draw donor members node take observed    value yevent y draw    synthetic values. function used syn() generate survival times    setting elements method syn() \"survctree\".   Additional parameters related ctree function,    e.g. minbucket can supplied syn()    survctree.minbucket. survival variable censored information must supplied    syn() named list (event) gives name variable    event indicator. Event variables can numeric variable    values 1/0 (1 = event), TRUE/FALSE (TRUE = event) factor 2 levels    (level 2 = event). event variable(s) synthesised along    survival time(s).","code":""},{"path":"https://florianm.github.io/synthpop/reference/syn.survctree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","text":"list following components: syn.time vector length k synthetic time values. syn.event vector length k synthetic event indicator       values. fit fitted model item class ctree.object.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/syn.survctree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesis of survival time by classification and regression trees (CART) — syn.survctree","text":"","code":"### This example uses the data set 'mgus2' from the survival package. ### It has a follow-up time variable 'futime' and an event indicator 'death'. library(survival)  ### first exclude the 'id' variable and run a dummy synthesis to get  ### a method vector ods <- mgus2[-1] s0 <- syn(ods) #> Warning: In your synthesis there are numeric variables with 5 or fewer levels: pstat, death. #> Consider changing them to factors. You can do it using parameter 'minnumlevels'. #>  #> Synthesis #> ----------- #>  age sex dxyr hgb creat mspike ptime pstat futime death #>   ### create new method vector including 'survctree' for 'futime' and create  ### an event list for it; the names of the list element must correspond to  ### the name of the follow-up variable for which the event indicator ### need to be specified. meth <- s0$method meth[names(meth) == \"futime\"] <- \"survctree\" evlist <- list(futime = \"death\")  s1 <- syn(ods, method = meth, event = evlist) #> Variable(s) {death} with method(s) {cart} removed from 'visit.sequence' #> because used as event indicator(s). #> Any event indicators will be synthesised along with the corresponding survival time(s).  #>  #> Warning: In your synthesis there are numeric variables with 5 or fewer levels: pstat. #> Consider changing them to factors. You can do it using parameter 'minnumlevels'. #>  #> Synthesis #> ----------- #>  age sex dxyr hgb creat mspike ptime pstat futime  ### evaluate outputs ## compare selected variables compare(s1, ods, vars = c(\"futime\", \"death\", \"sex\", \"creat\")) #>  #> Comparing percentages observed with synthetic #>   #>  #> Selected utility measures: #>            pMSE   S_pMSE df #> futime 0.000158 0.872877  4 #> death  0.000090 1.999082  1 #> sex    0.000019 0.418831  1 #> creat  0.000324 1.433824  5  ## compare original and synthetic follow up time by an event indicator multi.compare(s1, ods, var = \"futime\", by = \"death\") #>  #> Plots of  futime  by  death  #> Numbers in each plot (observed data): #>  #> death #>   0   1  #> 421 963  #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.   ## compare survival curves for original and synthetic data par(mfrow = c(2,1)) plot(survfit(Surv(futime, death) ~ sex, data = ods),       col = 1:2, xlim = c(0,450), main = \"Original data\") legend(\"topright\", levels(ods$sex), col = 1:2, lwd = 1, bty = \"n\") plot(survfit(Surv(futime, death) ~ sex, data = s1$syn),       col = 1:2, xlim = c(0,450), main = \"Synthetic data\")"},{"path":"https://florianm.github.io/synthpop/reference/synthpop-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating synthetic versions of sensitive microdata for statistical disclosure control — synthpop-package","title":"Generating synthetic versions of sensitive microdata for statistical disclosure control — synthpop-package","text":"Generate synthetic versions data set using parametric CART methods.","code":""},{"path":"https://florianm.github.io/synthpop/reference/synthpop-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating synthetic versions of sensitive microdata for statistical disclosure control — synthpop-package","text":"Synthetic data generated original (observed) data function  syn. package includes also tools compare synthetic data  observed data (compare.synds) fit (generalized) linear model  synthetic data (lm.synds, glm.synds) compare estimates  observed data (compare.fit.synds). extensive  documentation illustrative examples provided package vignette.","code":""},{"path":"https://florianm.github.io/synthpop/reference/synthpop-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating synthetic versions of sensitive microdata for statistical disclosure control — synthpop-package","text":"Beata Nowok, Gillian M Raab, Chris Dibben based package mice  (2.18) Stef van Buuren Karin Groothuis-Oudshoorn Maintainer: Beata Nowok <beata.nowok@gmail.com>","code":""},{"path":"https://florianm.github.io/synthpop/reference/synthpop-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generating synthetic versions of sensitive microdata for statistical disclosure control — synthpop-package","text":"Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 .","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Distributional comparison of synthesised and observed data — utility.gen","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"Distributional comparison synthesised data set original (observed)   data set using propensity scores. function can also used synthetic data created   syn(), additional parameters .synthesised   cont.na might need provided.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"","code":"# S3 method for synds utility.gen(object, data,              method = \"cart\", maxorder = 1, k.syn = FALSE, tree.method = \"rpart\",             max.params = 400, print.stats = c(\"pMSE\", \"S_pMSE\"), resamp.method = NULL,              nperms = 50, cp = 1e-3, minbucket = 5, mincriterion = 0, vars = NULL,              aggregate = FALSE, maxit = 200, ngroups = NULL, print.flag = TRUE,             print.every = 10, digits = 6, print.zscores = FALSE, zthresh = 1.6,             print.ind.results = FALSE, print.variable.importance = FALSE, ...)  # S3 method for data.frame utility.gen(object, data, not.synthesised = NULL, cont.na = NULL,              method = \"cart\", maxorder = 1, k.syn = FALSE, tree.method = \"rpart\",             max.params = 400, print.stats = c(\"pMSE\", \"S_pMSE\"), resamp.method = NULL,              nperms = 50, cp = 1e-3, minbucket = 5, mincriterion = 0, vars = NULL,              aggregate = FALSE, maxit = 200, ngroups = NULL, print.flag = TRUE,             print.every = 10, digits = 6, print.zscores = FALSE, zthresh = 1.6,             print.ind.results = FALSE, print.variable.importance = FALSE, ...)  # S3 method for list utility.gen(object, data, not.synthesised = NULL, cont.na = NULL,              method = \"cart\", maxorder = 1, k.syn = FALSE, tree.method = \"rpart\",             max.params = 400, print.stats = c(\"pMSE\", \"S_pMSE\"), resamp.method = NULL,              nperms = 50, cp = 1e-3, minbucket = 5, mincriterion = 0, vars = NULL,              aggregate = FALSE, maxit = 200, ngroups = NULL, print.flag = TRUE,             print.every = 10, digits = 6, print.zscores = FALSE, zthresh = 1.6,             print.ind.results = FALSE, print.variable.importance = FALSE, ...)   # S3 method for utility.gen print(x, digits = NULL, zthresh = NULL,                 print.zscores = NULL, print.stats = NULL,                print.ind.results = NULL, print.variable.importance = NULL, ...)"},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"object can object class synds, stands      'synthesised data set'. typically created function syn()      includes object$m synthesised data set(s) object$syn.      single data set object$m = 1 list length      object$m object$m > 1. Alternatively, data      synthesised using syn(), can data frame synthetic      data set list data frames synthetic data sets, created      original data variables method. data original (observed) data set. .synthesised vector variable names variables      left unchanged synthetic data. required oject      class synds cont.na named list codes missing values continuous     variables different R missing data code NA.     names list elements must correspond variables names      missing data codes need specified. required oject     class synds method single string specifying method modeling propensity      scores. Method can selected \"logit\" \"cart\". maxorder maximum order interactions considered      \"logit\" method. model without interactions 0     provided. k.syn logical indicator whether sample size      synthesised. tree.method implementation \"cart\" method used      method = \"cart\". can \"rpart\" \"ctree\". max.params maximum number parameters \"logit\" model      alerts user possible fitting failure. print.stats statistics printed must selection     \"pMSE\", \"SPECKS\", \"PO50\", \"S_pMSE\",      \"S_SPECKS\", \"S_PO50\". print.stats = \"\",      measures mentioned printed. resamp.method method used resampling estimates standardized      measures can \"perm\", \"pairs\" \"none\".       Defaults \"pairs\" print.stats includes \"S_SPECKS\"      \"S_PO50\" synthesis incomplete else defaults \"perm\"     method \"cart\" NULL, resampling needed,      method \"logit\". \"none\" can used get results      without standardized measures e.g. simulations. nperms number permutations permutation test obtain      null distribution utility measure resamp.method = \"perm\". cp complexity parameter classification tree.method      \"rpart\". Small values grow bigger trees. minbucket minimum number observations allowed leaf      classification method = \"cart\". mincriterion criterion 0 1 use control      tree.method = \"ctree\" tree allowed split      . value 0.95 equivalent 5%      significance test. set 0 effectively disable      test grow large trees. vars variables included utility comparison. can      character vector names variables integer vector      column indices. none specified variables synthesised      data included. aggregate logical flag whether data aggregated      collapsing identical rows computation. can lead much faster      computation variables categorical. works      method = \"logit\". maxit maximum iterations use method = \"logit\".      model converge number warning suggest increasing      . ngroups target number groups categorisation numeric      variable: final number may differ many repeated values.      NULL (default) variables categorised groups. print.flag TRUE/FALSE indicate messages      printed calculations. Change FALSE simulations. print.every controls printing progress resampling       resamp.method NULL. print.every = 0      progress reported, otherwise resample number printed every      print.every. ... additional parameters passed glm,     rpart, ctree. x object class utility.gen. digits number digits print default output values. zthresh threshold value use suppress printing z-scores      +/- value method = \"logit\". set      NA z-scores printed. print.zscores logical value whether z-scores coefficients      logit model printed. print.ind.results logical value whether utility score results      individual syntheses printed. print.variable.importance logical value whether variable      importance measure printed tree.method = \"rpart\".","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"function follows method evaluating utility masked data    given Snoke et al. (2018) originally proposed Woo et al.    (2009). original synthetic data combined one dataset    propensity scores, detailed Rosenbaum Rubin (1983), calculated    estimate probability membership synthetic data set.   utility measure based mean squared difference    probabilities probability expected data distinguish    synthetic data original. k.syn = FALSE expected probability just proportion    synthetic data combined data set, 0.5 original    synthetic data number records. Setting k.syn = TRUE    indicates numbers observations synthetic data    synthesised fixed synthesiser. case expected    probability 0.5 cases model discriminate   observed synthetic include intercept term.    usually apply standalone version function    utility.gen.sa() used. Propensity scores can modeled logistic regression method = \"logit\"    two different implementations classification regression trees    method \"cart\". logistic regression predictors variables    data interactions order maxorder. default    1 gives main effects first order interactions. logistic    regression null distribution propensity score derived    used calculate ratios standardised values. method = \"cart\" expectation variance null    distribution calculated permutation test. recent work   indicates method can sometimes give misleading results. missing values exist, indicator variables added included    model recommended Rosenbaum Rubin (1984). categorical variables,    NA treated new category.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"object class utility.gen list including utility    measures expected null values synthetic set following    components: call call produced result. m number synthetic data sets object. method method used fit propensity score. tree.method cart function used fit propensity score      method = \"cart\". resamp.method type resampling used get pMSEExp      pval. maxorder see . vars see . nfix see . aggregate see . maxit see . ngroups see . df degrees freedom chi-squared test logit models     derived number non-aliased coefficients logistic model,      minus 1 k.syn = FALSE. mincriterion see . nperms see . incomplete TRUE/FALSE indicator variables compared      synthesised. pMSE propensity score mean square error utility model       vector values object$m > 1. S_pMSE ratio(s) pMSE Null expectation. PO50 percentage  50% synthetic data set model      used correctly predicts whether real synthetic. S_PO50 ratio(s) PO50 Null expectation. SPECKS Kolmogorov-Smirnov statistic compare propensity scores       original synthetic records. S_SPECKS ratio(s) SPECKS Null expectation. print.stats see . fit fitted model propensity score list fitted      models length m m > 0. nosplits resampling methods cart models, list number     times total resampled cart model failed select      splits classify indicator. Indicates method working      correctly results used logit model selected instead. digits see . print.ind.results see . print.zscores see . zthresh see . print.variable.importance see .","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"Woo, M-J., Reiter, J.P., Oganian, . Karr, .F. (2009). Global measures    data utility microdata masked disclosure limitation.    Journal Privacy Confidentiality, 1(1), 111-124. Rosenbaum, P.R. Rubin, D.B. (1984). Reducing bias observational    studies using subclassification propensity score.   Journal American Statistical Association,   79(387), 516-524. Snoke, J., Raab, G.M., Nowok, B., Dibben, C. Slavkovic, . (2018).    General specific utility measures synthetic data.    Journal Royal Statistical Society: Series , 181,    Part 3, 663-688.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/utility.gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distributional comparison of synthesised and observed data — utility.gen","text":"","code":"if (FALSE) {   ods <- SD2011[1:1000, c(\"age\", \"bmi\", \"depress\", \"alcabuse\", \"nofriend\")]   s1 <- syn(ods, m = 5, method = \"parametric\",              cont.na = list(nofriend = -8))        ### synthetic data provided as a 'synds' object      u1 <- utility.gen(s1, ods)   print(u1, print.zscores = TRUE, zthresh = 1, digits = 6)   u2 <- utility.gen(s1, ods, ngroups = 3, print.flag = FALSE)   print(u2, print.zscores = TRUE)   u3 <- utility.gen(s1, ods, method = \"cart\", nperms = 20)   print(u3, print.variable.importance = TRUE)        ### synthetic data provided as 'list'   utility.gen(s1$syn, ods, cont.na = list(nofriend = -8))     }"},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabular utility — utility.tab","title":"Tabular utility — utility.tab","text":"Produces tables observed synthesised data calculates   utility measures compare expectation   synthesising model correct. can also used synthetic data created syn(),   additional parameter cont.na might need provided.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabular utility — utility.tab","text":"","code":"# S3 method for synds utility.tab(object, data, vars = NULL, ngroups = 5,             useNA = TRUE, max.table = 1e6,             print.tables = length(vars) < 4,             print.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),             print.zdiff = FALSE, print.flag = TRUE,             digits = 4, k.syn = FALSE, ...)  # S3 method for data.frame utility.tab(object, data, vars = NULL, cont.na = NULL,             ngroups = 5, useNA = TRUE, max.table = 1e6,             print.tables = length(vars) < 4,             print.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),             print.zdiff = FALSE, print.flag = TRUE,             digits = 4, k.syn = FALSE, ...)  # S3 method for list utility.tab(object, data, vars = NULL, cont.na = NULL,             ngroups = 5, useNA = TRUE, max.table = 1e6,             print.tables = length(vars) < 4,             print.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),             print.zdiff = FALSE, print.flag = TRUE,             digits = 4, k.syn = FALSE, ...)   # S3 method for utility.tab print(x, print.tables = NULL,       print.zdiff = NULL, print.stats = NULL,       digits = NULL, ...)"},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabular utility — utility.tab","text":"object object class synds, stands 'synthesised     data set'. typically created function syn()     syn.strata() includes object$m number synthesised     data set(s), well object$syn synthesised data set,     m = 1, list m data sets. Alternatively,     data synthesised using syn(), can data frame     synthetic data set list data frames synthetic data sets,     created original data variables     method. data original (observed) data set. vars single string vector strings names     variables used form table. cont.na named list codes missing values continuous     variables different R missing data code NA.     names list elements must correspond variables names     missing data codes need specified. max.table maximum table size. try increasing default      value, memory problems likely. ngroups numerical (non-factor) variables included     classified number groups form tables. Classification     performed using classIntervals() function n = ngroups.     default, style = \"quantile\" get appropriate groups skewed     data. Problems variables small number unique values handled     selecting unique values breaks. Arguments classIntervals()     may , however, specified call utility.tab(). useNA determines NA values included tables. print.tables logical value determines tables observed     synthesised data printed. default tables printed      three dimensions. print.stats single string vector strings determines     utility measures print. Must selection :        \"VW\", \"FT\",\"JSD\", \"SPECKS\", \"WMabsDD\",       \"U\", \"G\", \"pMSE\", \"PO50\", \"MabsDD\",       \"dBhatt\",  \"S_VW\", \"S_FT\", \"S_JSD\",       \"S_WMabsDD\", \"S_G\", \"S_pMSE\", \"df\", dfG.      print.stats = \"\", printed.      information see details section . print.zdiff logical value determines tables Z scores    differences observed expected printed. print.flag logical value determines messages printed      computation. digits integer indicating number decimal places printing     statistics, tab.zdiff mean results m > 1. k.syn logical indicator whether sample size     synthesised. default value FALSE, apply     synthetic data created synthpop. ... additional parameters; can passed classIntervals() function. x object class utility.tab.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabular utility — utility.tab","text":"Forms tables observed synthesised values variables specified vars. Several utility measures calculated cells tables, described . Details measures can found  Raab et al. (2021). synthesising model correct measures VW, FT, G JSD chi-square distributions  df degrees freedom large samples. Standardised versions  measure available (e.g. S_VW VW, S_VW = VW/df)  expected value 1 synthesising model correct.  Four measures calculated considering table prediction model.  propensity score mean-squared error pMSE, comparison  propensity scores synthetic original data Kolmogorov-Smirnov  statistic SPECKS Wilcoxon rank-sum statistic U also  percentage observations correctly predicted combined tables  50%(PO50) majority observations grouping  agreement category (real synthetic) observation. first  pMSE identical except constant VW. expected values  computed last three measures, can obtained replication  utility.gen().  Three measures calulated tables. mean absolute difference  distributions: firstly MabsDD, avarage absolute difference  proportions original synthetic data cells table.  Secondly weighted version measure WMabsDD weights  proportional inverse variance absolute differences  measure can standardised expected value, df. Finally  Bhattacharyya distances BhattD derived overlap histograms  original synthetic data sets.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabular utility — utility.tab","text":"object class utility.tab list following   components: m number synthetic data sets object, .e. object$m. VW vector object$m values Voas Williamson     utility measure.; linearly related pMSE. FT vector object$m values Freeman-Tukey     utility measure. JSD vector object$m values Jensen-Shannaon      divergence comparing tables. SPECKS vector object$m values Kolmogorov-Smirnov      statistic comparing propensity scores original synthetic      data. WMabsDD vector object$m values weighted mean      absolute difference distributions original synthetic data. U vector object$m values Wilcoxon statistic      comparing propensity scores original synthetic data. G vector object$m values adjusted likelihood      ratio utility measure. pMSE vector object$m values propensity score      mean-squared error; linearly related VW. PO50 vector object$m values percentage      50% observations correctly predicted propensity scores      linearly related SPECKS MabsDD. MabsDD vector object$m values mean absolute      difference distributions original synthetic data linearly      related SPECKS PO50. dBhatt vector object$m values Bhattacharyya      distances synthetic original data, linearly related      square root FT. S_VW VW/df. S_FT FT/df. S_JSD JSD/df. S_WMabsDD WMabsDD/df. S_G G/df. S_pMSE standardised measure pMSE, identical S_VW. df vector degrees freedom chi-square tests equal     number cells tables observed     synthesised counts minus one k.syn == FALSE equal     number cells k.syn == TRUE. dfG degrees freedom used standardising G. nempty vector length object$m number cells     contributing statistics. tab.obs table observed data. tab.syn table list m tables synthetic data. tab.zdiff table list m tables Z statistics     differences observed synthesised cells tables. Large     absolute values indicate large contribution lack--fit. digits integer indicating number decimal places     printing statistics, tab.zdiff mean results m > 1. print.tables logical value determines tables observed     synthesised printed. print.stats single string vector strings utility measures    printed . print.zdiff logical value determines tables  Z scores    differences observed expected printed. n number observation original dataset. k.syn logical indicator whether sample size     synthesised.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tabular utility — utility.tab","text":"Nowok, B., Raab, G.M Dibben, C. (2016). synthpop: Bespoke   creation synthetic data R. Journal Statistical Software,   74(11), 1-26. doi:10.18637/jss.v074.i11 . Raab, G.M., Nowok, B. Dibben, C. (2021). Assessing, visualizing    improving utility synthetic data. Available    https://arxiv.org/abs/2109.12717. Read, T.R.C. Cressie, N..C. (1988) Goodness----Fit Statistics   Discrete Multivariate Data, Springer--Verlag, New York. Voas, D. Williamson, P. (2001) Evaluating goodness--fit measures   synthetic microdata. Geographical Environmental Modelling,   5(2), 177-200.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/utility.tab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabular utility — utility.tab","text":"","code":"ods <- SD2011[1:1000, c(\"sex\", \"age\", \"marital\", \"nofriend\")]  s1 <- syn(ods, m = 10, cont.na = list(nofriend = -8)) #>  #> Synthesis number 1 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 2 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 3 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 4 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 5 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 6 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 7 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 8 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 9 #> -------------------- #>  sex age marital nofriend #>  #> Synthesis number 10 #> -------------------- #>  sex age marital nofriend utility.tab(s1, ods, vars = c(\"marital\", \"sex\"), print.stats = \"all\") #>  #> Observed: #> ($tab.obs) #>                     sex #> marital              MALE FEMALE #>   SINGLE              156    109 #>   MARRIED             268    313 #>   WIDOWED              10     93 #>   DIVORCED             11     30 #>   LEGALLY SEPARATED     2      0 #>   DE FACTO SEPARATED    0      5 #>   <NA>                  1      2 #>  #> Mean of 10 synthetic tables ($tab.syn): #>                     sex #> marital               MALE FEMALE #>   SINGLE             150.0  113.6 #>   MARRIED            274.6  307.5 #>   WIDOWED             10.1   91.8 #>   DIVORCED            12.3   31.1 #>   LEGALLY SEPARATED    1.2    0.0 #>   DE FACTO SEPARATED   0.0    4.4 #>   <NA>                 1.3    2.1 #>  #> Selected utility measures from 10 syntheses: #>         VW      FT    JSD SPECKS WMabsDD        U       G   pMSE PO50 MabsDD #> 1  13.2321 17.5233 0.0027  0.022 11.4785 515641.0  8.6658 0.0008 1.10  0.044 #> 2   8.7500 12.7740 0.0019  0.024  9.9198 517981.5  4.6827 0.0005 1.20  0.048 #> 3  28.6949 32.8633 0.0055  0.066 20.6471 541808.0 25.7377 0.0018 3.30  0.132 #> 4   8.7084 10.8429 0.0017  0.026  9.7026 518120.5  6.4673 0.0005 1.30  0.052 #> 5  15.4531 15.7516 0.0028  0.050 13.9184 529536.0 16.6441 0.0010 2.50  0.100 #> 6  12.5744 14.6264 0.0024  0.033 10.9798 524711.5 10.8317 0.0008 1.65  0.066 #> 7   7.3763  7.8225 0.0014  0.012  8.1789 510351.5  8.7406 0.0005 0.60  0.024 #> 8   7.0810  9.1092 0.0014  0.025 10.1135 517469.0  5.0488 0.0004 1.25  0.050 #> 9  10.3883 10.4533 0.0019  0.040 11.9292 525658.0 10.2727 0.0006 2.00  0.080 #> 10 17.2808 21.3630 0.0034  0.039 14.3949 528451.5 13.6157 0.0011 1.95  0.078 #>    dBhatt   S_VW   S_FT  S_JSD S_WMabsDD    S_G S_pMSE df dfG #> 1  0.0468 1.2029 1.5930 1.4161    1.0435 0.8666 1.2029 11  10 #> 2  0.0400 0.7955 1.1613 0.9755    0.9018 0.4683 0.7955 11  10 #> 3  0.0641 2.6086 2.9876 2.8715    1.8770 2.5738 2.6086 11  10 #> 4  0.0368 0.7917 0.9857 0.9053    0.8821 0.6467 0.7917 11  10 #> 5  0.0444 1.4048 1.4320 1.4804    1.2653 1.5131 1.4048 11  11 #> 6  0.0428 1.1431 1.3297 1.2660    0.9982 1.0832 1.1431 11  10 #> 7  0.0313 0.6706 0.7111 0.7249    0.7435 0.7946 0.6706 11  11 #> 8  0.0337 0.6437 0.8281 0.7448    0.9194 0.5049 0.6437 11  10 #> 9  0.0361 0.9444 0.9503 0.9869    1.0845 0.9339 0.9444 11  11 #> 10 0.0517 1.5710 1.9421 1.7862    1.3086 1.3616 1.5710 11  10  s2 <- syn(ods, m = 1, cont.na = list(nofriend = -8)) #>  #> Synthesis #> ----------- #>  sex age marital nofriend u2 <- utility.tab(s2, ods, vars = c(\"marital\", \"age\", \"sex\"), ngroups = 3) print(u2, print.tables = TRUE, print.zdiff = TRUE) #>  #> Observed: #> ($tab.obs) #> , , sex = MALE #>  #>                     age #> marital              [16,36) [36,56) [56,92] #>   SINGLE                 125      24       7 #>   MARRIED                 30     121     117 #>   WIDOWED                  1       2       7 #>   DIVORCED                 0       4       7 #>   LEGALLY SEPARATED        0       1       1 #>   DE FACTO SEPARATED       0       0       0 #>   <NA>                     0       0       1 #>  #> , , sex = FEMALE #>  #>                     age #> marital              [16,36) [36,56) [56,92] #>   SINGLE                  97       7       5 #>   MARRIED                 64     141     108 #>   WIDOWED                  1      11      81 #>   DIVORCED                 2      19       9 #>   LEGALLY SEPARATED        0       0       0 #>   DE FACTO SEPARATED       1       3       1 #>   <NA>                     1       1       0 #>  #>  #> Synthesised:  #> ($tab.syn) #> , , sex = MALE #>  #>                     age #> marital              [16,36) [36,56) [56,92] #>   SINGLE                 117      21       8 #>   MARRIED                 31     119     125 #>   WIDOWED                  1       1       8 #>   DIVORCED                 0       3       4 #>   LEGALLY SEPARATED        0       1       1 #>   DE FACTO SEPARATED       0       0       0 #>   <NA>                     0       0       2 #>  #> , , sex = FEMALE #>  #>                     age #> marital              [16,36) [36,56) [56,92] #>   SINGLE                 102       8       9 #>   MARRIED                 48     147     109 #>   WIDOWED                  3       9      81 #>   DIVORCED                 5      17      13 #>   LEGALLY SEPARATED        0       0       0 #>   DE FACTO SEPARATED       1       3       0 #>   <NA>                     3       0       0 #>  #>  #> Table of z-scores for differences:  #> ($tab.zdiff) #> , , sex = MALE #>  #>                     age #> marital              [16,36) [36,56) [56,92] #>   SINGLE             -0.7273 -0.6325  0.3651 #>   MARRIED             0.1811 -0.1826  0.7273 #>   WIDOWED             0.0000 -0.8165  0.3651 #>   DIVORCED                   -0.5345 -1.2792 #>   LEGALLY SEPARATED           0.0000  0.0000 #>   DE FACTO SEPARATED                         #>   <NA>                                0.8165 #>  #> , , sex = FEMALE #>  #>                     age #> marital              [16,36) [36,56) [56,92] #>   SINGLE              0.5013  0.3651  1.5119 #>   MARRIED            -2.1381  0.5000  0.0960 #>   WIDOWED             1.4142 -0.6325  0.0000 #>   DIVORCED            1.6036 -0.4714  1.2060 #>   LEGALLY SEPARATED                          #>   DE FACTO SEPARATED  0.0000  0.0000 -1.4142 #>   <NA>                1.4142 -1.4142         #>  #>  #> Selected utility measures: #>     pMSE S_pMSE df #> 1 0.0016 0.8398 30  ### synthetic data provided as 'data.frame' utility.tab(s2$syn, ods, vars = c(\"marital\", \"nofriend\"), ngroups = 3,             print.tables = TRUE, cont.na = list(nofriend = -8), digits = 4) #>  #> Observed adjusted to match the size of the synthetic data: #> ($tab.obs) #>                     nofriend #> marital              [0,4) [4,8) [8,99]  -8 #>   SINGLE                78    92     94   1 #>   MARRIED              193   185    198   5 #>   WIDOWED               46    24     31   2 #>   DIVORCED              14    15     12   0 #>   LEGALLY SEPARATED      2     0      0   0 #>   DE FACTO SEPARATED     3     1      1   0 #>   <NA>                   0     2      1   0 #>  #> Synthesised:  #> ($tab.syn) #>                     nofriend #> marital              [0,4) [4,8) [8,99]  -8 #>   SINGLE                77   107     80   1 #>   MARRIED              188   191    196   4 #>   WIDOWED               38    30     34   1 #>   DIVORCED              12    13     16   1 #>   LEGALLY SEPARATED      1     1      0   0 #>   DE FACTO SEPARATED     2     2      0   0 #>   <NA>                   2     1      2   0 #>  #> Selected utility measures: #>     pMSE S_pMSE df #> 1 0.0015 1.0303 23"},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Tables and plots of utility measures — utility.tables","title":"Tables and plots of utility measures — utility.tables","text":"Calculates plots tables utility measures. calculations    utility measures done function utility.tab.   Options one-way tables, two-way tables three-way tables    specified third variable along pairs variables. function can also used synthetic data created    syn(), additional parameters .synthesised    cont.na might need provided.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tables and plots of utility measures — utility.tables","text":"","code":"# S3 method for synds utility.tables(object, data,                tables = \"twoway\", maxtables = 5e4,                vars = NULL, third.var = NULL,                useNA = TRUE, ngroups = 5,                tab.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),                 plot.stat = \"S_pMSE\", plot = TRUE,                 print.tabs = FALSE, digits.tabs = 4,                max.scale = NULL, min.scale = 0, plot.title = NULL,                nworst = 5, ntabstoprint = 0, k.syn = FALSE,                 low = \"grey92\", high = \"#E41A1C\",                n.breaks = NULL, breaks = NULL, ...)                 # S3 method for data.frame utility.tables(object, data,                 cont.na = NULL, not.synthesised = NULL,                 tables = \"twoway\", maxtables = 5e4,                vars = NULL, third.var = NULL,                 useNA = TRUE, ngroups = 5,                 tab.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),                 plot.stat = \"S_pMSE\", plot = TRUE,                  print.tabs = FALSE, digits.tabs = 4,                max.scale = NULL, min.scale = 0, plot.title = NULL,                  nworst = 5, ntabstoprint = 0, k.syn = FALSE,                low = \"grey92\", high = \"#E41A1C\",                n.breaks = NULL, breaks = NULL, ...)  # S3 method for list utility.tables(object, data,                cont.na = NULL, not.synthesised = NULL,                 tables = \"twoway\", maxtables = 5e4,                 vars = NULL, third.var = NULL,                 useNA = TRUE, ngroups = 5,                 tab.stats = c(\"pMSE\", \"S_pMSE\", \"df\"),                 plot.stat = \"S_pMSE\", plot = TRUE,                 print.tabs = FALSE, digits.tabs = 4,                max.scale = NULL, min.scale = 0, plot.title = NULL,                  nworst = 5, ntabstoprint = 0, k.syn = FALSE,                low = \"grey92\", high = \"#E41A1C\",                n.breaks = NULL, breaks = NULL, ...)  # S3 method for utility.tables print(x, print.tabs = NULL, digits.tabs = NULL,        plot = NULL, plot.title = NULL, max.scale = NULL, min.scale = NULL,        nworst = NULL, ntabstoprint = NULL, ...)"},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tables and plots of utility measures — utility.tables","text":"object object class synds, stands 'synthesised      data set'. typically created function syn() includes      object$m synthesised data set(s) object$syn. single      data set object$m = 1 list length object$m      object$m > 1. Alternatively, data synthesised using      syn(), can data frame synthetic data set list      data frames synthetic data sets, created original      data variables method. data original (observed) data set. cont.na named list codes missing values continuous     variables different R missing data code NA.     names list elements must correspond variables names      missing data codes need specified. .synthesised vector variable names variables      left unchanged synthetic data. tables defines type tables produce. Options      \"oneway\", \"twoway\" (default) \"threeway\".      set \"oneway\" \"twoway\" possible tables      vars produced. \"threeway\", third.var may      specified three-way tables variable pairs      variables produced. third variable specified function     chooses variable largest median utility measure three-way     tables contributes . maxtables maximum number tables produced. number      tables larger, utility measured sample size      maxtables. produce plots twoway three way tables      sampled tables . vars vector strings names variables used form      table, vector variable numbers original data. Defaults      variables original synthetic data. third.var tables \"threeway\" variable      make third variable pairs useNA determines NA values included tables.      applies method \"tab\". ngroups numerical (non-factor) variables included      method = \"tab\" classified number groups form     tables. Classification performed using classIntervals() function      n = ngroups. default, style = \"quantile\", get      appropriate groups skewed data. Problems variables small      number unique  values handled selecting unique values      breaks. Arguments classIntervals() may , however, specified      call utility.tables(). tab.stats statistics include table results. Must      selection : \"VW\", \"FT\",\"JSD\", \"SPECKS\",      \"WMabsDD\", \"U\", \"G\", \"pMSE\", \"PO50\",      \"MabsDD\", \"dBhatt\",  \"S_VW\", \"S_FT\",      \"S_JSD\", \"S_WMabsDD\", \"S_G\", \"S_pMSE\",      \"df\", dfG. tab.stats = \"\",      included. See utility.tab explanations measures. plot.stat statistics plot. Choice  \"VW\", \"FT\",     \"JSD\", \"SPECKS\",  \"WMabsDD\", \"U\", \"G\",      \"pMSE\", \"PO50\", \"MabsDD\", \"dBhatt\",      \"S_VW\", \"S_FT\", \"S_JSD\", \"S_WMabsDD\",      \"S_G\", \"S_pMSE\". See utility.tab      explanations measures. plot determines plot produced result printed. print.tabs logical value determines table results      printed. digits.tabs number digits print table, except      p-values always printed 4 places. max.scale numeric value maximum value used calculating      shading plots. NULL maximum value       replaced maximum value data. min.scale numeric value minimum value used calculating      shading plots. NULL minimum value       replaced zero. plot.title title plot. nworst number variable combinations worst utility scores      printed. ntabstoprint number tables print observed synthetic      data worst utility. k.syn logical indicator whether sample size      synthesised. low colour low end gradient. high colour high end gradient. n.breaks number break points create breaks given      directly. breaks breaks two colour binned gradient. ... additional parameters x object class utility.tables.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tables and plots of utility measures — utility.tables","text":"Calculates tables observed synthesised values variables    specified vars function utility.tab produces     tables plots one-way, two-way    three-way utility measures formed vars. Several options utility    measures can selected printing plotting. Details help file    utility.tab. tables variables worst utility scores identified.    Visualisations matrices utility scores plotted. threeway   tables third variable can defined select tables involving    variable plotting. specified variable tables    giving worst utility selected third variable.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tables and plots of utility measures — utility.tables","text":"object class utility.tab list following    components: tabs table selected measures combinations      variables defined tables, third.var, vars. plot.stat measure used mat toplot. tables see . third.var see . utility.plot plot selected utility measure. var.scores average utility scores combinations     variables. plot see . print.tabs see . digits.tabs see . plot.title see . max.scale see . min.scale see . ntabstoprint see . nworst see . worstn variable combinations nworst worst utility scores. worsttabs observed synthetic cross-tabulations worstn.","code":""},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tables and plots of utility measures — utility.tables","text":"Read, T.R.C. Cressie, N..C. (1988) Goodness----Fit Statistics    Discrete Multivariate Data, Springer--Verlag, New York. Voas, D. Williamson, P. (2001) Evaluating goodness--fit measures    synthetic microdata. Geographical Environmental Modelling,   5(2), 177-200.","code":""},{"path":[]},{"path":"https://florianm.github.io/synthpop/reference/utility.tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tables and plots of utility measures — utility.tables","text":"","code":"ods <- SD2011[1:1000, c(\"sex\", \"age\", \"edu\", \"marital\", \"region\", \"income\")] s1 <- syn(ods) #>  #> Synthesis #> ----------- #>  sex age edu marital region income  ### synthetic data provided as a 'synds' object   (t1 <- utility.tables(s1, ods, tab.stats = \"all\", print.tabs = TRUE)) #>  #> Two-way utility: S_pMSE value plotted for 15 pairs of variables. #>  #> Variable combinations with worst 5 utility scores (S_pMSE): #>    3.edu:4.marital     3.edu:6.income 4.marital:6.income        1.sex:3.edu  #>             2.4250             2.2399             2.0515             1.7562  #>  5.region:6.income  #>             1.6795   #>  #> Table of selected utility measures #>                          VW       FT    JSD SPECKS  WMabsDD        U        G #> 1.sex:2.age         13.5480  13.5825 0.0024  0.046  11.5552 530749.5  13.8765 #> 1.sex:3.edu         14.0495  16.0694 0.0027  0.047  11.7750 531365.0  12.0713 #> 1.sex:4.marital     12.4275  12.4657 0.0022  0.049  13.0011 529537.5  12.5492 #> 1.sex:5.region      18.9728  19.1397 0.0034  0.049  23.7869 535973.5  18.6950 #> 1.sex:6.income       9.3742   9.3881 0.0017  0.039  10.8971 526724.0   9.4378 #> 2.age:3.edu         27.0988  29.1940 0.0050  0.066  23.5977 545009.0  24.8808 #> 2.age:4.marital     25.0989  35.2240 0.0052  0.048  24.8629 533018.0  15.7710 #> 2.age:5.region      79.5641  85.1280 0.0148  0.106  79.9712 576764.0  75.1965 #> 2.age:6.income      38.1826  38.7985 0.0070  0.062  26.9316 548473.5  37.9247 #> 3.edu:4.marital     63.0497  84.9123 0.0130  0.068  43.6769 550932.5  45.7973 #> 3.edu:5.region      74.8008  81.5838 0.0140  0.108  70.7818 574630.0  67.9978 #> 3.edu:6.income      53.7586  56.2707 0.0099  0.092  38.5360 563655.5  52.7679 #> 4.marital:5.region 121.4061 173.2982 0.0257  0.098  92.9615 577352.0  72.6354 #> 4.marital:6.income  75.9072 116.4769 0.0165  0.075  57.6446 556993.5  36.2427 #> 5.region:6.income  159.5497 171.3872 0.0299  0.156 124.7286 610671.0 162.9952 #>                      pMSE PO50 MabsDD dBhatt   S_VW   S_FT  S_JSD S_WMabsDD #> 1.sex:2.age        0.0008 2.30  0.092 0.0412 1.5053 1.5092 1.5692    1.2839 #> 1.sex:3.edu        0.0009 2.35  0.094 0.0448 1.7562 2.0087 1.9299    1.4719 #> 1.sex:4.marital    0.0008 2.45  0.098 0.0395 1.1298 1.1332 1.1781    1.1819 #> 1.sex:5.region     0.0012 2.45  0.098 0.0489 0.6120 0.6174 0.6406    0.7673 #> 1.sex:6.income     0.0006 1.95  0.078 0.0343 0.8522 0.8535 0.8877    0.9906 #> 2.age:3.edu        0.0017 3.30  0.132 0.0604 1.3549 1.4597 1.4536    1.1799 #> 2.age:4.marital    0.0016 2.40  0.096 0.0664 0.9653 1.3548 1.1625    0.9563 #> 2.age:5.region     0.0050 5.30  0.212 0.1032 1.0071 1.0776 1.0819    1.0123 #> 2.age:6.income     0.0024 3.10  0.124 0.0696 1.3166 1.3379 1.3848    0.9287 #> 3.edu:4.marital    0.0039 3.40  0.136 0.1030 2.4250 3.2659 2.8810    1.6799 #> 3.edu:5.region     0.0047 5.40  0.216 0.1010 1.1688 1.2747 1.2624    1.1060 #> 3.edu:6.income     0.0034 4.60  0.184 0.0839 2.2399 2.3446 2.3793    1.6057 #> 4.marital:5.region 0.0076 4.90  0.196 0.1472 1.6187 2.3106 1.9762    1.2395 #> 4.marital:6.income 0.0047 3.75  0.150 0.1207 2.0515 3.1480 2.5802    1.5580 #> 5.region:6.income  0.0100 7.80  0.312 0.1464 1.6795 1.8041 1.8144    1.3129 #>                       S_G S_pMSE df dfG #> 1.sex:2.age        1.5418 1.5053  9   9 #> 1.sex:3.edu        1.7245 1.7562  8   7 #> 1.sex:4.marital    1.1408 1.1298 11  11 #> 1.sex:5.region     0.6031 0.6120 31  31 #> 1.sex:6.income     0.8580 0.8522 11  11 #> 2.age:3.edu        1.3095 1.3549 20  19 #> 2.age:4.marital    0.6857 0.9653 26  23 #> 2.age:5.region     0.9641 1.0071 79  78 #> 2.age:6.income     1.3077 1.3166 29  29 #> 3.edu:4.marital    2.5443 2.4250 26  18 #> 3.edu:5.region     1.0967 1.1688 64  62 #> 3.edu:6.income     2.2943 2.2399 24  23 #> 4.marital:5.region 1.1907 1.6187 75  61 #> 4.marital:6.income 1.5101 2.0515 37  24 #> 5.region:6.income  1.7340 1.6795 95  94 ### synthetic data provided as a 'data.frame' object (t1 <- utility.tables(s1$syn, ods, tab.stats = \"all\", print.tabs = TRUE)) #>  #> Two-way utility: S_pMSE value plotted for 15 pairs of variables. #>  #> Variable combinations with worst 5 utility scores (S_pMSE): #>    3.edu:4.marital     3.edu:6.income 4.marital:6.income        1.sex:3.edu  #>             2.4250             2.2399             2.0515             1.7562  #>  5.region:6.income  #>             1.6795   #>  #> Table of selected utility measures #>                          VW       FT    JSD SPECKS  WMabsDD        U        G #> 1.sex:2.age         13.5480  13.5825 0.0024  0.046  11.5552 530749.5  13.8765 #> 1.sex:3.edu         14.0495  16.0694 0.0027  0.047  11.7750 531365.0  12.0713 #> 1.sex:4.marital     12.4275  12.4657 0.0022  0.049  13.0011 529537.5  12.5492 #> 1.sex:5.region      18.9728  19.1397 0.0034  0.049  23.7869 535973.5  18.6950 #> 1.sex:6.income       9.3742   9.3881 0.0017  0.039  10.8971 526724.0   9.4378 #> 2.age:3.edu         27.0988  29.1940 0.0050  0.066  23.5977 545009.0  24.8808 #> 2.age:4.marital     25.0989  35.2240 0.0052  0.048  24.8629 533018.0  15.7710 #> 2.age:5.region      79.5641  85.1280 0.0148  0.106  79.9712 576764.0  75.1965 #> 2.age:6.income      38.1826  38.7985 0.0070  0.062  26.9316 548473.5  37.9247 #> 3.edu:4.marital     63.0497  84.9123 0.0130  0.068  43.6769 550932.5  45.7973 #> 3.edu:5.region      74.8008  81.5838 0.0140  0.108  70.7818 574630.0  67.9978 #> 3.edu:6.income      53.7586  56.2707 0.0099  0.092  38.5360 563655.5  52.7679 #> 4.marital:5.region 121.4061 173.2982 0.0257  0.098  92.9615 577352.0  72.6354 #> 4.marital:6.income  75.9072 116.4769 0.0165  0.075  57.6446 556993.5  36.2427 #> 5.region:6.income  159.5497 171.3872 0.0299  0.156 124.7286 610671.0 162.9952 #>                      pMSE PO50 MabsDD dBhatt   S_VW   S_FT  S_JSD S_WMabsDD #> 1.sex:2.age        0.0008 2.30  0.092 0.0412 1.5053 1.5092 1.5692    1.2839 #> 1.sex:3.edu        0.0009 2.35  0.094 0.0448 1.7562 2.0087 1.9299    1.4719 #> 1.sex:4.marital    0.0008 2.45  0.098 0.0395 1.1298 1.1332 1.1781    1.1819 #> 1.sex:5.region     0.0012 2.45  0.098 0.0489 0.6120 0.6174 0.6406    0.7673 #> 1.sex:6.income     0.0006 1.95  0.078 0.0343 0.8522 0.8535 0.8877    0.9906 #> 2.age:3.edu        0.0017 3.30  0.132 0.0604 1.3549 1.4597 1.4536    1.1799 #> 2.age:4.marital    0.0016 2.40  0.096 0.0664 0.9653 1.3548 1.1625    0.9563 #> 2.age:5.region     0.0050 5.30  0.212 0.1032 1.0071 1.0776 1.0819    1.0123 #> 2.age:6.income     0.0024 3.10  0.124 0.0696 1.3166 1.3379 1.3848    0.9287 #> 3.edu:4.marital    0.0039 3.40  0.136 0.1030 2.4250 3.2659 2.8810    1.6799 #> 3.edu:5.region     0.0047 5.40  0.216 0.1010 1.1688 1.2747 1.2624    1.1060 #> 3.edu:6.income     0.0034 4.60  0.184 0.0839 2.2399 2.3446 2.3793    1.6057 #> 4.marital:5.region 0.0076 4.90  0.196 0.1472 1.6187 2.3106 1.9762    1.2395 #> 4.marital:6.income 0.0047 3.75  0.150 0.1207 2.0515 3.1480 2.5802    1.5580 #> 5.region:6.income  0.0100 7.80  0.312 0.1464 1.6795 1.8041 1.8144    1.3129 #>                       S_G S_pMSE df dfG #> 1.sex:2.age        1.5418 1.5053  9   9 #> 1.sex:3.edu        1.7245 1.7562  8   7 #> 1.sex:4.marital    1.1408 1.1298 11  11 #> 1.sex:5.region     0.6031 0.6120 31  31 #> 1.sex:6.income     0.8580 0.8522 11  11 #> 2.age:3.edu        1.3095 1.3549 20  19 #> 2.age:4.marital    0.6857 0.9653 26  23 #> 2.age:5.region     0.9641 1.0071 79  78 #> 2.age:6.income     1.3077 1.3166 29  29 #> 3.edu:4.marital    2.5443 2.4250 26  18 #> 3.edu:5.region     1.0967 1.1688 64  62 #> 3.edu:6.income     2.2943 2.2399 24  23 #> 4.marital:5.region 1.1907 1.6187 75  61 #> 4.marital:6.income 1.5101 2.0515 37  24 #> 5.region:6.income  1.7340 1.6795 95  94  t2 <- utility.tables(s1, ods, tables = \"twoway\") print(t2, max.scale = 3) #>  #> Two-way utility: S_pMSE value plotted for 15 pairs of variables. #>  #> Variable combinations with worst 5 utility scores (S_pMSE): #>    3.edu:4.marital     3.edu:6.income 4.marital:6.income        1.sex:3.edu  #>             2.4250             2.2399             2.0515             1.7562  #>  5.region:6.income  #>             1.6795   #>  #> Medians and maxima of selected utility measures for all tables compared #>        Medians Maxima #> pMSE    0.0024  0.010 #> S_pMSE  1.3549  2.425 #> df     26.0000 95.000 #>  #> For more details of all scores use print.tabs = TRUE.  (t3 <- utility.tables(s1, ods, tab.stats = \"all\", tables = \"threeway\",                        third.var = \"sex\", print.tabs = TRUE)) #>  #> Three-way utility (total of 20 variable combinations): #>  #> Average of 3-way scores S_pMSE (ordered) for 3-way tables including each variable. #>  6.income 4.marital     3.edu     1.sex  5.region     2.age  #>  1.745562  1.740576  1.710200  1.601466  1.527327  1.517667  #>  #> Variable with highest average score, 1.sex, selected to make plots. #> To see others, set parameter 'third.var'. #>  #> Variable combinations with worst 5 utility scores (S_pMSE): #>       1.sex:3.edu:4.marital    3.edu:4.marital:6.income  #>                      2.3545                      2.1137  #>    1.sex:4.marital:6.income 4.marital:5.region:6.income  #>                      1.9452                      1.8418  #>     3.edu:5.region:6.income  #>                      1.7870   #>  #> Table of selected utility measures #>                                   VW        FT    JSD SPECKS  WMabsDD        U #> 1.sex:2.age:3.edu            68.3580   71.5137 0.0126  0.103  53.7091 570300.0 #> 1.sex:2.age:4.marital        53.1420   63.8290 0.0104  0.084  48.5232 558238.0 #> 1.sex:2.age:5.region        195.1775  229.3586 0.0379  0.166 174.4574 619620.5 #> 1.sex:2.age:6.income         87.8049   94.0331 0.0164  0.113  73.3394 579764.0 #> 1.sex:3.edu:4.marital       101.2454  133.7126 0.0207  0.098  72.7155 573042.0 #> 1.sex:3.edu:5.region        161.7050  195.9694 0.0318  0.148 143.3987 606034.0 #> 1.sex:3.edu:6.income         72.9249   75.8103 0.0134  0.103  59.2648 575087.5 #> 1.sex:4.marital:5.region    200.8421  292.2690 0.0428  0.143 161.5521 608351.5 #> 1.sex:4.marital:6.income    118.6581  169.0391 0.0250  0.108  90.3779 580484.0 #> 1.sex:5.region:6.income     310.2146  400.4684 0.0630  0.195 233.9749 646743.0 #> 2.age:3.edu:4.marital       141.0044  204.0796 0.0300  0.120 117.1309 587121.5 #> 2.age:3.edu:5.region        377.2141  529.1660 0.0792  0.219 323.7140 662232.0 #> 2.age:3.edu:6.income        200.1727  244.7140 0.0395  0.165 150.7779 619389.5 #> 2.age:4.marital:5.region    333.5551  535.0839 0.0744  0.182 286.6636 642096.0 #> 2.age:4.marital:6.income    201.5031  296.0390 0.0433  0.131 153.7463 603605.0 #> 2.age:5.region:6.income     661.4622 1046.0735 0.1470  0.292 519.9739 719518.0 #> 3.edu:4.marital:5.region    364.9517  571.8842 0.0806  0.200 303.4234 653140.5 #> 3.edu:4.marital:6.income    230.3936  332.1226 0.0489  0.161 174.7419 620119.5 #> 3.edu:5.region:6.income     596.8706  920.4195 0.1310  0.284 463.4376 709316.0 #> 4.marital:5.region:6.income 567.2758  897.4909 0.1261  0.261 438.4289 699108.5 #>                                    G   pMSE  PO50 MabsDD dBhatt   S_VW   S_FT #> 1.sex:2.age:3.edu            65.4975 0.0043  5.15  0.206 0.0945 1.7090 1.7878 #> 1.sex:2.age:4.marital        45.0136 0.0033  4.20  0.168 0.0893 1.2359 1.4844 #> 1.sex:2.age:5.region        172.5799 0.0122  8.30  0.332 0.1693 1.2511 1.4702 #> 1.sex:2.age:6.income         88.1187 0.0055  5.65  0.226 0.1084 1.4882 1.5938 #> 1.sex:3.edu:4.marital        81.8634 0.0063  4.90  0.196 0.1293 2.3545 3.1096 #> 1.sex:3.edu:5.region        133.0191 0.0101  7.40  0.296 0.1565 1.2633 1.5310 #> 1.sex:3.edu:6.income         73.4145 0.0046  5.15  0.206 0.0973 1.5516 1.6130 #> 1.sex:4.marital:5.region    114.3982 0.0126  7.15  0.286 0.1911 1.5569 2.2657 #> 1.sex:4.marital:6.income     76.2070 0.0074  5.40  0.216 0.1454 1.9452 2.7711 #> 1.sex:5.region:6.income     269.4928 0.0194  9.75  0.390 0.2237 1.6589 2.1415 #> 2.age:3.edu:4.marital        86.0023 0.0088  6.00  0.240 0.1597 1.6589 2.4009 #> 2.age:3.edu:5.region        247.2862 0.0236 10.95  0.438 0.2572 1.3329 1.8698 #> 2.age:3.edu:6.income        167.3600 0.0125  8.25  0.330 0.1749 1.7714 2.1656 #> 2.age:4.marital:5.region    142.5463 0.0208  9.10  0.364 0.2586 1.4316 2.2965 #> 2.age:4.marital:6.income    123.7217 0.0126  6.55  0.262 0.1924 1.7077 2.5088 #> 2.age:5.region:6.income     322.4693 0.0413 14.60  0.584 0.3616 1.5901 2.5146 #> 3.edu:4.marital:5.region    171.8409 0.0228 10.00  0.400 0.2674 1.5596 2.4439 #> 3.edu:4.marital:6.income    144.1979 0.0144  8.05  0.322 0.2038 2.1137 3.0470 #> 3.edu:5.region:6.income     318.6324 0.0373 14.20  0.568 0.3392 1.7870 2.7557 #> 4.marital:5.region:6.income 290.6975 0.0355 13.05  0.522 0.3349 1.8418 2.9139 #>                              S_JSD S_WMabsDD    S_G S_pMSE  df dfG #> 1.sex:2.age:3.edu           1.8183    1.3427 1.6794 1.7090  40  39 #> 1.sex:2.age:4.marital       1.3905    1.1284 1.1542 1.2359  43  39 #> 1.sex:2.age:5.region        1.4010    1.1183 1.1354 1.2511 156 152 #> 1.sex:2.age:6.income        1.6016    1.2430 1.5193 1.4882  59  58 #> 1.sex:3.edu:4.marital       2.7802    1.6911 2.5582 2.3545  43  32 #> 1.sex:3.edu:5.region        1.4315    1.1203 1.1178 1.2633 128 119 #> 1.sex:3.edu:6.income        1.6448    1.2610 1.5960 1.5516  47  46 #> 1.sex:4.marital:5.region    1.9161    1.2523 1.1327 1.5569 129 101 #> 1.sex:4.marital:6.income    2.3670    1.4816 1.7320 1.9452  61  44 #> 1.sex:5.region:6.income     1.9453    1.2512 1.5760 1.6589 187 171 #> 2.age:3.edu:4.marital       2.0344    1.3780 1.4099 1.6589  85  61 #> 2.age:3.edu:5.region        1.6160    1.1439 1.0568 1.3329 283 234 #> 2.age:3.edu:6.income        2.0178    1.3343 1.6092 1.7714 113 104 #> 2.age:4.marital:5.region    1.8438    1.2303 0.9138 1.4316 233 156 #> 2.age:4.marital:6.income    2.1174    1.3029 1.4555 1.7077 118  85 #> 2.age:5.region:6.income     2.0393    1.2499 1.0470 1.5901 416 308 #> 3.edu:4.marital:5.region    1.9865    1.2967 1.1015 1.5596 234 156 #> 3.edu:4.marital:6.income    2.5891    1.6031 1.9226 2.1137 109  75 #> 3.edu:5.region:6.income     2.2631    1.3875 1.3221 1.7870 334 241 #> 4.marital:5.region:6.income 2.3631    1.4235 1.4984 1.8418 308 194  (t4 <- utility.tables(s1, ods, tab.stats = \"all\", tables = \"threeway\",                        third.var = \"sex\", useNA = FALSE, print.tabs = TRUE)) #>  #> Three-way utility (total of 20 variable combinations): #>  #> Average of 3-way scores S_pMSE (ordered) for 3-way tables including each variable. #> 4.marital  6.income     3.edu     1.sex  5.region     2.age  #>  1.718703  1.704867  1.703099  1.564257  1.530968  1.522167  #>  #> Variable with highest average score, 1.sex, selected to make plots. #> To see others, set parameter 'third.var'. #>  #> Variable combinations with worst 5 utility scores (S_pMSE): #>       1.sex:3.edu:4.marital    3.edu:4.marital:6.income  #>                      2.4481                      2.0832  #> 4.marital:5.region:6.income     3.edu:5.region:6.income  #>                      1.8844                      1.8363  #>    2.age:4.marital:6.income  #>                      1.8001   #>  #> Table of selected utility measures #>                                   VW       FT    JSD SPECKS  WMabsDD        U #> 1.sex:2.age:3.edu            66.3902  67.5465 0.0121 0.1025  51.9261 569300.0 #> 1.sex:2.age:4.marital        52.4480  63.1101 0.0103 0.0837  47.4480 554075.0 #> 1.sex:2.age:5.region        195.1775 229.3586 0.0379 0.1660 174.4574 619620.5 #> 1.sex:2.age:6.income         71.9020  73.5852 0.0154 0.1153  61.0153 427964.0 #> 1.sex:3.edu:4.marital        90.5788 113.0263 0.0182 0.0954  62.8299 566048.0 #> 1.sex:3.edu:5.region        159.7839 192.0645 0.0313 0.1476 141.6757 605034.0 #> 1.sex:3.edu:6.income         55.9873  56.5803 0.0119 0.1008  47.1509 421758.0 #> 1.sex:4.marital:5.region    186.7474 264.1354 0.0395 0.1401 150.2122 601363.5 #> 1.sex:4.marital:6.income     70.4039  93.6665 0.0169 0.0935  61.1195 416374.5 #> 1.sex:5.region:6.income     262.4193 342.1608 0.0625 0.1916 195.1360 475579.5 #> 2.age:3.edu:4.marital       129.0044 180.0796 0.0271 0.1175 106.4962 580017.0 #> 2.age:3.edu:5.region        375.4010 525.4278 0.0788 0.2186 322.1180 661232.0 #> 2.age:3.edu:6.income        159.8386 183.3835 0.0359 0.1639 122.1902 455104.5 #> 2.age:4.marital:5.region    319.3939 506.8285 0.0712 0.1793 274.2918 635108.0 #> 2.age:4.marital:6.income    172.8107 242.9802 0.0427 0.1388 126.7859 444452.5 #> 2.age:5.region:6.income     563.1238 888.1617 0.1459 0.2917 443.3098 530350.0 #> 3.edu:4.marital:5.region    348.9517 539.8842 0.0769 0.1968 289.2438 645156.5 #> 3.edu:4.marital:6.income    179.1593 244.4541 0.0435 0.1558 134.8367 450361.0 #> 3.edu:5.region:6.income     503.1467 760.5998 0.1277 0.2863 388.5716 522378.5 #> 4.marital:5.region:6.income 489.9494 769.4582 0.1273 0.2663 377.9903 513431.0 #>                                    G   pMSE    PO50 MabsDD dBhatt   S_VW   S_FT #> 1.sex:2.age:3.edu            65.4975 0.0041  5.1276 0.2049 0.0919 1.7023 1.7320 #> 1.sex:2.age:4.marital        44.2499 0.0033  4.1897 0.1673 0.0890 1.3112 1.5778 #> 1.sex:2.age:5.region        172.5799 0.0122  8.3000 0.3320 0.1693 1.2511 1.4702 #> 1.sex:2.age:6.income         74.8773 0.0052  5.7625 0.2305 0.1036 1.4674 1.5017 #> 1.sex:3.edu:4.marital        81.2607 0.0057  4.7691 0.1908 0.1191 2.4481 3.0548 #> 1.sex:3.edu:5.region        133.0191 0.0100  7.3787 0.2951 0.1549 1.2581 1.5123 #> 1.sex:3.edu:6.income         57.2584 0.0041  5.0379 0.2016 0.0908 1.4733 1.4890 #> 1.sex:4.marital:5.region    114.3982 0.0117  6.9995 0.2801 0.1821 1.5183 2.1474 #> 1.sex:4.marital:6.income     50.3129 0.0052  4.6464 0.1869 0.1172 1.5305 2.0362 #> 1.sex:5.region:6.income     225.9267 0.0191  9.5460 0.3832 0.2234 1.6822 2.1933 #> 2.age:3.edu:4.marital        86.0023 0.0081  5.8735 0.2349 0.1503 1.6539 2.3087 #> 2.age:3.edu:5.region        247.2862 0.0235 10.9305 0.4373 0.2563 1.3312 1.8632 #> 2.age:3.edu:6.income        146.1639 0.0117  8.1829 0.3277 0.1635 1.7004 1.9509 #> 2.age:4.marital:5.region    142.5463 0.0200  8.9563 0.3585 0.2522 1.4132 2.2426 #> 2.age:4.marital:6.income    118.9872 0.0127  6.9258 0.2777 0.1887 1.8001 2.5310 #> 2.age:5.region:6.income     275.3497 0.0411 14.5518 0.5834 0.3599 1.5907 2.5089 #> 3.edu:4.marital:5.region    171.8409 0.0219  9.8394 0.3936 0.2603 1.5440 2.3889 #> 3.edu:4.marital:6.income    128.4875 0.0131  7.7778 0.3117 0.1893 2.0832 2.8425 #> 3.edu:5.region:6.income     286.5560 0.0367 14.2982 0.5725 0.3331 1.8363 2.7759 #> 4.marital:5.region:6.income 260.0205 0.0359 13.2963 0.5327 0.3358 1.8844 2.9595 #>                              S_JSD S_WMabsDD    S_G S_pMSE  df dfG #> 1.sex:2.age:3.edu           1.7909    1.3314 1.6794 1.7023  39  39 #> 1.sex:2.age:4.marital       1.4771    1.1862 1.2292 1.3112  40  36 #> 1.sex:2.age:5.region        1.4010    1.1183 1.1354 1.2511 156 152 #> 1.sex:2.age:6.income        1.5540    1.2452 1.5281 1.4674  49  49 #> 1.sex:3.edu:4.marital       2.8220    1.6981 2.6213 2.4481  37  31 #> 1.sex:3.edu:5.region        1.4200    1.1156 1.1178 1.2581 127 119 #> 1.sex:3.edu:6.income        1.5467    1.2408 1.5068 1.4733  38  38 #> 1.sex:4.marital:5.region    1.8455    1.2212 1.1327 1.5183 123 101 #> 1.sex:4.marital:6.income    1.8094    1.3287 1.3240 1.5305  46  38 #> 1.sex:5.region:6.income     1.9870    1.2509 1.5799 1.6822 156 143 #> 2.age:3.edu:4.marital       1.9950    1.3653 1.4334 1.6539  78  60 #> 2.age:3.edu:5.region        1.6114    1.1423 1.0568 1.3312 282 234 #> 2.age:3.edu:6.income        1.8899    1.2999 1.6423 1.7004  94  89 #> 2.age:4.marital:5.region    1.8116    1.2137 0.9138 1.4132 226 156 #> 2.age:4.marital:6.income    2.1955    1.3207 1.6079 1.8001  96  74 #> 2.age:5.region:6.income     2.0426    1.2523 1.0391 1.5907 354 265 #> 3.edu:4.marital:5.region    1.9547    1.2798 1.1015 1.5440 226 156 #> 3.edu:4.marital:6.income    2.4963    1.5679 1.9468 2.0832  86  66 #> 3.edu:5.region:6.income     2.3084    1.4181 1.4186 1.8363 274 202 #> 4.marital:5.region:6.income 2.4169    1.4538 1.5759 1.8844 260 165  (t5 <- utility.tables(s1, ods,  tab.stats = \"all\",                        print.tabs = TRUE)) #>  #> Two-way utility: S_pMSE value plotted for 15 pairs of variables. #>  #> Variable combinations with worst 5 utility scores (S_pMSE): #>    3.edu:4.marital     3.edu:6.income 4.marital:6.income        1.sex:3.edu  #>             2.4250             2.2399             2.0515             1.7562  #>  5.region:6.income  #>             1.6795   #>  #> Table of selected utility measures #>                          VW       FT    JSD SPECKS  WMabsDD        U        G #> 1.sex:2.age         13.5480  13.5825 0.0024  0.046  11.5552 530749.5  13.8765 #> 1.sex:3.edu         14.0495  16.0694 0.0027  0.047  11.7750 531365.0  12.0713 #> 1.sex:4.marital     12.4275  12.4657 0.0022  0.049  13.0011 529537.5  12.5492 #> 1.sex:5.region      18.9728  19.1397 0.0034  0.049  23.7869 535973.5  18.6950 #> 1.sex:6.income       9.3742   9.3881 0.0017  0.039  10.8971 526724.0   9.4378 #> 2.age:3.edu         27.0988  29.1940 0.0050  0.066  23.5977 545009.0  24.8808 #> 2.age:4.marital     25.0989  35.2240 0.0052  0.048  24.8629 533018.0  15.7710 #> 2.age:5.region      79.5641  85.1280 0.0148  0.106  79.9712 576764.0  75.1965 #> 2.age:6.income      38.1826  38.7985 0.0070  0.062  26.9316 548473.5  37.9247 #> 3.edu:4.marital     63.0497  84.9123 0.0130  0.068  43.6769 550932.5  45.7973 #> 3.edu:5.region      74.8008  81.5838 0.0140  0.108  70.7818 574630.0  67.9978 #> 3.edu:6.income      53.7586  56.2707 0.0099  0.092  38.5360 563655.5  52.7679 #> 4.marital:5.region 121.4061 173.2982 0.0257  0.098  92.9615 577352.0  72.6354 #> 4.marital:6.income  75.9072 116.4769 0.0165  0.075  57.6446 556993.5  36.2427 #> 5.region:6.income  159.5497 171.3872 0.0299  0.156 124.7286 610671.0 162.9952 #>                      pMSE PO50 MabsDD dBhatt   S_VW   S_FT  S_JSD S_WMabsDD #> 1.sex:2.age        0.0008 2.30  0.092 0.0412 1.5053 1.5092 1.5692    1.2839 #> 1.sex:3.edu        0.0009 2.35  0.094 0.0448 1.7562 2.0087 1.9299    1.4719 #> 1.sex:4.marital    0.0008 2.45  0.098 0.0395 1.1298 1.1332 1.1781    1.1819 #> 1.sex:5.region     0.0012 2.45  0.098 0.0489 0.6120 0.6174 0.6406    0.7673 #> 1.sex:6.income     0.0006 1.95  0.078 0.0343 0.8522 0.8535 0.8877    0.9906 #> 2.age:3.edu        0.0017 3.30  0.132 0.0604 1.3549 1.4597 1.4536    1.1799 #> 2.age:4.marital    0.0016 2.40  0.096 0.0664 0.9653 1.3548 1.1625    0.9563 #> 2.age:5.region     0.0050 5.30  0.212 0.1032 1.0071 1.0776 1.0819    1.0123 #> 2.age:6.income     0.0024 3.10  0.124 0.0696 1.3166 1.3379 1.3848    0.9287 #> 3.edu:4.marital    0.0039 3.40  0.136 0.1030 2.4250 3.2659 2.8810    1.6799 #> 3.edu:5.region     0.0047 5.40  0.216 0.1010 1.1688 1.2747 1.2624    1.1060 #> 3.edu:6.income     0.0034 4.60  0.184 0.0839 2.2399 2.3446 2.3793    1.6057 #> 4.marital:5.region 0.0076 4.90  0.196 0.1472 1.6187 2.3106 1.9762    1.2395 #> 4.marital:6.income 0.0047 3.75  0.150 0.1207 2.0515 3.1480 2.5802    1.5580 #> 5.region:6.income  0.0100 7.80  0.312 0.1464 1.6795 1.8041 1.8144    1.3129 #>                       S_G S_pMSE df dfG #> 1.sex:2.age        1.5418 1.5053  9   9 #> 1.sex:3.edu        1.7245 1.7562  8   7 #> 1.sex:4.marital    1.1408 1.1298 11  11 #> 1.sex:5.region     0.6031 0.6120 31  31 #> 1.sex:6.income     0.8580 0.8522 11  11 #> 2.age:3.edu        1.3095 1.3549 20  19 #> 2.age:4.marital    0.6857 0.9653 26  23 #> 2.age:5.region     0.9641 1.0071 79  78 #> 2.age:6.income     1.3077 1.3166 29  29 #> 3.edu:4.marital    2.5443 2.4250 26  18 #> 3.edu:5.region     1.0967 1.1688 64  62 #> 3.edu:6.income     2.2943 2.2399 24  23 #> 4.marital:5.region 1.1907 1.6187 75  61 #> 4.marital:6.income 1.5101 2.0515 37  24 #> 5.region:6.income  1.7340 1.6795 95  94"},{"path":"https://florianm.github.io/synthpop/reference/write.syn.html","id":null,"dir":"Reference","previous_headings":"","what":"Exporting synthetic data sets to external files — write.syn","title":"Exporting synthetic data sets to external files — write.syn","text":"Exports synthetic data set(s) synthesised data set  (synds) object external files selected format.  Currently supported file formats include: SPSS, Stata, SAS, csv, tab, rda, RData txt. SPSS, Stata SAS uses functions  foreign package adjustments necessary. Information synthesis written separate text file. NOTE: Currently numeric codes labels can preserved correctly  SPSS files imported R using read.obs function.","code":""},{"path":"https://florianm.github.io/synthpop/reference/write.syn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exporting synthetic data sets to external files — write.syn","text":"","code":"write.syn(object, filename,  filetype = c(\"SPSS\", \"Stata\", \"SAS\", \"csv\", \"tab\", \"rda\", \"RData\", \"txt\"),  convert.factors = \"numeric\", data.labels = NULL, save.complete = TRUE,  extended.info = TRUE, ...)"},{"path":"https://florianm.github.io/synthpop/reference/write.syn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exporting synthetic data sets to external files — write.syn","text":"object object class synds, stands     'synthesised data set'. typically created     function syn includes object$m      synthesised data set(s). filename name file (excluding extension)      synthetic data written . multiple synthetic data sets     used prefix folowed respectively _1, _...,      _m. filetype desired format output files. convert.factors single string indicating handle factors      Stata output files. default value set \"numeric\" order      preserve numeric codes original data.      See write.dta possible values. data.labels list variable labels value labels. save.complete logical value indicating whether complete      'synthesised data set' (synds) object saved file     (synobject_filename.RData). extended.info logical value indicating whether extended information     saved information file. ... additional parameters passed write functions.","code":""},{"path":"https://florianm.github.io/synthpop/reference/write.syn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exporting synthetic data sets to external files — write.syn","text":"File(s) synthesised data set(s) text file information    synthesis produced. Optionally complete synthesised data set   object saved synobject_filename.RData file.","code":""},{"path":[]},{"path":[]},{"path":"https://florianm.github.io/synthpop/news/index.html","id":"maintenance-1-8-2","dir":"Changelog","previous_headings":"","what":"Maintenance","title":"synthpop 1.8-2","text":"version brings maintenance uplift incorporate tidyverse standards. (#31) Add devcontainer config allow contributing GitHub Codespaces. Source: jamesgoldie.dev Add NEWS.md file track changes package. Add README.Rmd file. (#30) Add pkgdown site deployed GitHub via usethis::use_pkgdown_github_pages(). (#23) Add Roxygen documentation. Migrate hand-written NAMESPACE .Rd docs Roxygen docstrings.","code":""}]
